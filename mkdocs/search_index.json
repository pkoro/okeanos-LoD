{
    "docs": [
        {
            "location": "/", 
            "text": "\u03bb on Demand\n\n\nThese pages contain technical documentation regarding the Lambda on Demand service. The service targets ~okeanos users that want to deploy a fully capable \u03bb instance (cluster) on top of ~okeanos resources. \n\n\nDescription of \u03bb (lambda) instance\n\n\nEach \u03bb instance provided through the service is comprised of the following building blocks:\n\n\n\n\nA YARN based hadoop infrastructure with HDFS\n\n\nA Flink based cluster running on top of YARN\n\n\nA Kafka brokering service (incl. Zookeper for service node discovery)\n\n\n\n\nA \u03bb instance comprised of \nn\n nodes (VMs) will contain \nn\n HDFS nodes, one Flink master and \nn-1\n Flink slaves, and \nn\n Kafka brokers as shown in the screenshot below\n\n\n\n\nHow the service works\n\n\nIn order to use the service an ~okeanos user will first need to spin up a service virtual machine on ~okeanos. To do so one needs to select and use the 'Lambda (\u03bb) Service VM' image as shown on the screenshot below. \n\n\n\n\nProvisioning a \u03bb instance\n\n\nAfter spinning up a \u03bb Service VM the user of the service can utilize \u03bb instances on demand either through the service API or through the service web frontend as shown in the screenshot below. \n\n\n\n\nThe web front interface uses the API interface in the backend. More details on the API interface are available \nhere\n. \n\n\nThe API interface uses the Fokia library in its backend. More details on the Fokia library are available \nhere\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#on-demand", 
            "text": "These pages contain technical documentation regarding the Lambda on Demand service. The service targets ~okeanos users that want to deploy a fully capable \u03bb instance (cluster) on top of ~okeanos resources.", 
            "title": "\u03bb on Demand"
        }, 
        {
            "location": "/#description-of-lambda-instance", 
            "text": "Each \u03bb instance provided through the service is comprised of the following building blocks:   A YARN based hadoop infrastructure with HDFS  A Flink based cluster running on top of YARN  A Kafka brokering service (incl. Zookeper for service node discovery)   A \u03bb instance comprised of  n  nodes (VMs) will contain  n  HDFS nodes, one Flink master and  n-1  Flink slaves, and  n  Kafka brokers as shown in the screenshot below", 
            "title": "Description of \u03bb (lambda) instance"
        }, 
        {
            "location": "/#how-the-service-works", 
            "text": "In order to use the service an ~okeanos user will first need to spin up a service virtual machine on ~okeanos. To do so one needs to select and use the 'Lambda (\u03bb) Service VM' image as shown on the screenshot below.", 
            "title": "How the service works"
        }, 
        {
            "location": "/#provisioning-a-instance", 
            "text": "After spinning up a \u03bb Service VM the user of the service can utilize \u03bb instances on demand either through the service API or through the service web frontend as shown in the screenshot below.    The web front interface uses the API interface in the backend. More details on the API interface are available  here .   The API interface uses the Fokia library in its backend. More details on the Fokia library are available  here .", 
            "title": "Provisioning a \u03bb instance"
        }, 
        {
            "location": "/fokia/details/", 
            "text": "Overview\n\n\nThe Fokia library is used internally by the \u03bb service in order to bootstrap and orchestrate ~okeanos resources (VMs, virtual networks, disks etc). Internally, Fokia implements calls to the ~okeanos API via the kamaki library and orchestrates the provisioned resources via the Ansible API library. \n\n\nUML Class diagram\n\n\nThe Fokia UML class diagram is the following one:\n\n\n\n\nThe Fokia library is installed on each \u03bb service VM. \n\n\nFokia Flowchart\n\n\nThe following flowchart displays the procedures followed by Fokia when creating a new \u03bb instance.", 
            "title": "Technical details"
        }, 
        {
            "location": "/fokia/details/#overview", 
            "text": "The Fokia library is used internally by the \u03bb service in order to bootstrap and orchestrate ~okeanos resources (VMs, virtual networks, disks etc). Internally, Fokia implements calls to the ~okeanos API via the kamaki library and orchestrates the provisioned resources via the Ansible API library.", 
            "title": "Overview"
        }, 
        {
            "location": "/fokia/details/#uml-class-diagram", 
            "text": "The Fokia UML class diagram is the following one:   The Fokia library is installed on each \u03bb service VM.", 
            "title": "UML Class diagram"
        }, 
        {
            "location": "/fokia/details/#fokia-flowchart", 
            "text": "The following flowchart displays the procedures followed by Fokia when creating a new \u03bb instance.", 
            "title": "Fokia Flowchart"
        }, 
        {
            "location": "/fokia/usage/", 
            "text": "Installation\n\n\nAlthough, not intended to operate in this way, the Fokia library can be used to bootstrap and configure a \u03bb instance. To install the Fokia library (locally) a user needs to have \npip\n already installed and available.\n\n\nThe user must have (or create) a \n~/.kamakirc\n configuration file. Here is an example configuration:\n\n\n[global]\ndefault_cloud = lambda\n; ca_certs = /path/to/certs\n\n[cloud \nlambda\n]\nurl = https://accounts.okeanos.grnet.gr/identity/v2.0\ntoken = your-okeanos-token\n\n\n\n\nAfter checking out the \ncode base\n change directory into \ncore/\n and install the Fokia prerequisites with the following command:\n\n\n$ sudo pip install -r requirements.txt\n\n\n\n\nThen install the Fokia library using the following command:\n\n\n$ sudo python setup.py install\n\n\n\n\nExample\n\n\nTo bootstrap a \u03bb instance the \nlambda_instance_manager.py\n executable inside the \ncore/fokia/\n folder can be used. The available options are shown in the listing below:\n\n\n$ python lambda_instance_manager.py -h\nusage: lambda_instance_manager.py [-h] [--master-name MASTER_NAME]\n                                  [--slaves SLAVES]\n                                  [--vcpus_master VCPUS_MASTER]\n                                  [--vcpus_slave VCPUS_SLAVE]\n                                  [--ram_master RAM_MASTER]\n                                  [--ram_slave RAM_SLAVE]\n                                  [--disk_master DISK_MASTER]\n                                  [--disk_slave DISK_SLAVE]\n                                  [--project-name PROJECT_NAME]\n\noptional arguments:\n  --master-name MASTER_NAME\n                        Name of Flink master VM [default: lambda-master]\n  --slaves SLAVES       Number of Flink slaves [default: 1]\n  --vcpus_master VCPUS_MASTER\n                        Number of CPUs on Flink master [default: 4]\n  --vcpus_slave VCPUS_SLAVE\n                        Number of CPUs on Flink slave(s) [default: 4]\n  --ram_master RAM_MASTER\n                        Size of RAM on Flink master (in MB) [default: 4096MB]\n  --ram_slave RAM_SLAVE\n                        Size of RAM on Flink slave(s) (in MB) [default: 4096MB]\n  --disk_master DISK_MASTER\n                        Size of disk on Flink master (in GB) [default: 40GB]\n  --disk_slave DISK_SLAVE\n                        Size of disk on Flink slave(s) (in GB) [default: 40GB]\n\n\n\n\nAs an example with the command given below we bootstrap a \u03bb instance comprised of one Flink master and 5 Flink slaves:\n\n\n$ python lambda_instance_manager.py --slaves 5 --project-name \n~okeanos-project-name\n\n\n\n\n\nIn the command above one should replace the argument \n~okeanos-project-name\n with a valid ~okeanos project name.", 
            "title": "Usage"
        }, 
        {
            "location": "/fokia/usage/#installation", 
            "text": "Although, not intended to operate in this way, the Fokia library can be used to bootstrap and configure a \u03bb instance. To install the Fokia library (locally) a user needs to have  pip  already installed and available.  The user must have (or create) a  ~/.kamakirc  configuration file. Here is an example configuration:  [global]\ndefault_cloud = lambda\n; ca_certs = /path/to/certs\n\n[cloud  lambda ]\nurl = https://accounts.okeanos.grnet.gr/identity/v2.0\ntoken = your-okeanos-token  After checking out the  code base  change directory into  core/  and install the Fokia prerequisites with the following command:  $ sudo pip install -r requirements.txt  Then install the Fokia library using the following command:  $ sudo python setup.py install", 
            "title": "Installation"
        }, 
        {
            "location": "/fokia/usage/#example", 
            "text": "To bootstrap a \u03bb instance the  lambda_instance_manager.py  executable inside the  core/fokia/  folder can be used. The available options are shown in the listing below:  $ python lambda_instance_manager.py -h\nusage: lambda_instance_manager.py [-h] [--master-name MASTER_NAME]\n                                  [--slaves SLAVES]\n                                  [--vcpus_master VCPUS_MASTER]\n                                  [--vcpus_slave VCPUS_SLAVE]\n                                  [--ram_master RAM_MASTER]\n                                  [--ram_slave RAM_SLAVE]\n                                  [--disk_master DISK_MASTER]\n                                  [--disk_slave DISK_SLAVE]\n                                  [--project-name PROJECT_NAME]\n\noptional arguments:\n  --master-name MASTER_NAME\n                        Name of Flink master VM [default: lambda-master]\n  --slaves SLAVES       Number of Flink slaves [default: 1]\n  --vcpus_master VCPUS_MASTER\n                        Number of CPUs on Flink master [default: 4]\n  --vcpus_slave VCPUS_SLAVE\n                        Number of CPUs on Flink slave(s) [default: 4]\n  --ram_master RAM_MASTER\n                        Size of RAM on Flink master (in MB) [default: 4096MB]\n  --ram_slave RAM_SLAVE\n                        Size of RAM on Flink slave(s) (in MB) [default: 4096MB]\n  --disk_master DISK_MASTER\n                        Size of disk on Flink master (in GB) [default: 40GB]\n  --disk_slave DISK_SLAVE\n                        Size of disk on Flink slave(s) (in GB) [default: 40GB]  As an example with the command given below we bootstrap a \u03bb instance comprised of one Flink master and 5 Flink slaves:  $ python lambda_instance_manager.py --slaves 5 --project-name  ~okeanos-project-name   In the command above one should replace the argument  ~okeanos-project-name  with a valid ~okeanos project name.", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/details/", 
            "text": "\u03bb service API\n\n\nThe service API UML Class diagram is shown in the following picture. \n\n\n\n\nDocumentation on using the \u03bb service API as well as usage examples are available \nhere\n\n\n\u03bb service database\n\n\nA postgresql database is installed on each \u03bb service. The schema of the database is given in the following screenshot. \n\n\n\n\nCQRS implementation\n\n\nOn each \u03bb service resource three Celery queues are available. These are:\n\n\n\n\nTasks queue\n\n\nEvents queue\n\n\nStatistics queue\n\n\n\n\nThe first one (Tasks queue) delivers tasks through the API to the Fokia library. Fokia functions are registered as Celery tasks on the backend layer. By default up to two tasks may be executed on the Tasks queue at any given time. \n\n\nThe events queue withholds and executes tasks that alter the contents of the \u03bb service database. Tasks to the event queue are delivered through tasks being executed on the Tasks queue. By default one event task executes at any given time. \n\n\nTasks to the statistics queue are published once again through the Tasks queue. These alter the value of the metrics collected on the central instance.", 
            "title": "Technical details"
        }, 
        {
            "location": "/service-api/details/#service-api", 
            "text": "The service API UML Class diagram is shown in the following picture.    Documentation on using the \u03bb service API as well as usage examples are available  here", 
            "title": "\u03bb service API"
        }, 
        {
            "location": "/service-api/details/#service-database", 
            "text": "A postgresql database is installed on each \u03bb service. The schema of the database is given in the following screenshot.", 
            "title": "\u03bb service database"
        }, 
        {
            "location": "/service-api/details/#cqrs-implementation", 
            "text": "On each \u03bb service resource three Celery queues are available. These are:   Tasks queue  Events queue  Statistics queue   The first one (Tasks queue) delivers tasks through the API to the Fokia library. Fokia functions are registered as Celery tasks on the backend layer. By default up to two tasks may be executed on the Tasks queue at any given time.   The events queue withholds and executes tasks that alter the contents of the \u03bb service database. Tasks to the event queue are delivered through tasks being executed on the Tasks queue. By default one event task executes at any given time.   Tasks to the statistics queue are published once again through the Tasks queue. These alter the value of the metrics collected on the central instance.", 
            "title": "CQRS implementation"
        }, 
        {
            "location": "/service-api/", 
            "text": "~okeanos Lambda on Demand project\n\n\nAPI Endpoints - Description\n\n\nAPI Endpoints for lambda instances\n\n\n\n\nCreate Lambda Instance\n\n\nList Lambda Instances\n\n\nCount Lambda Instances\n\n\nDetails of a Lambda Instance\n\n\nActions on a Lambda Instance\n\n\nDestroy a Lambda Instance\n\n\n\n\nAPI Endpoints for applications\n\n\n\n\nUpload an Application\n\n\nDelete an Application\n\n\nList Applications\n\n\nCount Applications\n\n\nDetails of an Application\n\n\n\n\nAPI Endpoints for applications on a specified lambda instance\n\n\n\n\nDeploy an Application\n\n\nWithdraw an Application\n\n\nList Deployed Applications\n\n\nStart an Application\n\n\nStop an Application\n\n\n\n\nAPI Endpoints for authentication and generic use\n\n\n\n\nAuthentication\n\n\nGet SSH public keys on ~okeanos\n\n\nGet allowed VM Parameter Values\n\n\nGet User ~okeanos Projects", 
            "title": "Usage"
        }, 
        {
            "location": "/service-api/#api-endpoints-description", 
            "text": "API Endpoints for lambda instances   Create Lambda Instance  List Lambda Instances  Count Lambda Instances  Details of a Lambda Instance  Actions on a Lambda Instance  Destroy a Lambda Instance   API Endpoints for applications   Upload an Application  Delete an Application  List Applications  Count Applications  Details of an Application   API Endpoints for applications on a specified lambda instance   Deploy an Application  Withdraw an Application  List Deployed Applications  Start an Application  Stop an Application   API Endpoints for authentication and generic use   Authentication  Get SSH public keys on ~okeanos  Get allowed VM Parameter Values  Get User ~okeanos Projects", 
            "title": "API Endpoints - Description"
        }, 
        {
            "location": "/service-api/Authentication/", 
            "text": "API - authentication - Description\n\n\nThe authentication call, given an authentication token through the header Authorization, will\nconnect to the ~okeanos authentication service and check the validity of the given token. If\nthe token is valid then the API will reply with a \"200 Success\" code, otherwise it will return\nan \"401 Unauthorized\" error along with details regarding the error.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nAuthentication token validation\n\n\n\n\n\n\nURL\n\n\n/api/authenticate/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample\n\n\nExample of simple validation of an API token\n\n\ncurl -X GET -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'https://\nhostname\n/api/authenticate/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct then the response is\n\n\n{\n  \nstatus\n: 200,\n  \nresult\n: \nSuccess\n,\n  \ndata\n: {\nname\n:\nLambda User\n}\n}\n\n\n\n\nIf the authentication token is not correct then the response is\n\n\n{\n  \nerrors\n: [\n    {\n      \nmessage\n: \nInvalid token\n,\n      \ncode\n: 401,\n      \ndetails\n: \nunauthorized\n\n    }\n  ]\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Authentication"
        }, 
        {
            "location": "/service-api/Authentication/#api-authentication-description", 
            "text": "The authentication call, given an authentication token through the header Authorization, will\nconnect to the ~okeanos authentication service and check the validity of the given token. If\nthe token is valid then the API will reply with a \"200 Success\" code, otherwise it will return\nan \"401 Unauthorized\" error along with details regarding the error.", 
            "title": "API - authentication - Description"
        }, 
        {
            "location": "/service-api/Authentication/#basic-parameters", 
            "text": "Type  Description      Description  Authentication token validation    URL  /api/authenticate/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/Authentication/#example", 
            "text": "Example of simple validation of an API token  curl -X GET -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'https:// hostname /api/authenticate/'  Response body  If the authentication token is correct then the response is  {\n   status : 200,\n   result :  Success ,\n   data : { name : Lambda User }\n}  If the authentication token is not correct then the response is  {\n   errors : [\n    {\n       message :  Invalid token ,\n       code : 401,\n       details :  unauthorized \n    }\n  ]\n}  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/CreateLambdaInstance/", 
            "text": "API - create lambda instance - Description\n\n\nLambda instance creation call. Given an authentication token through the header authentication,\nand the instance specifications through other HTTP headers,\nit will firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will start creating a new lambda instance\nusing the instance specifications provided via the HTTP headers. For creating the cluster,\nthe Fokia library will be used. This library firstly uses kamaki to create the desired cluster of\nVMs, then runs ansible on the VMs to build a complete lambda instance. After starting the lambda\ninstance creation, the API will reply with the details of the cluster in creation, along with a\n\"200 Success\" code.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nCreate a new lambda instance\n\n\n\n\n\n\nURL\n\n\n/api/lambda-instance/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceu...\n\n\n\n\n\n\n\n\nBody\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\ninstance_name\n\n\nName of the lambda instance\n\n\nYes\n\n\nNone\n\n\nMy first Lambda Instance\n\n\n\n\n\n\nmaster_name\n\n\nName of the master node\n\n\nYes\n\n\nNone\n\n\nlambda-master\n\n\n\n\n\n\nslaves\n\n\nNumber of slaves\n\n\nYes\n\n\nNone\n\n\n3\n\n\n\n\n\n\nvcpus_master\n\n\nNumber of CPUs of the master node\n\n\nYes\n\n\nNone\n\n\n4\n\n\n\n\n\n\nvcpus_slave\n\n\nNumber of CPUs of each slave node\n\n\nYes\n\n\nNone\n\n\n2\n\n\n\n\n\n\nram_master\n\n\nAmount of RAM of master node in MB\n\n\nYes\n\n\nNone\n\n\n4096\n\n\n\n\n\n\nram_master\n\n\nAmount of RAM of each slave node in MB\n\n\nYes\n\n\nNone\n\n\n2048\n\n\n\n\n\n\ndisk_master\n\n\nAmount of HDD space of master node in GB\n\n\nYes\n\n\nNone\n\n\n40\n\n\n\n\n\n\ndisk_slave\n\n\nAmount of HDD space of each slave node in GB\n\n\nYes\n\n\nNone\n\n\n40\n\n\n\n\n\n\nip_allocation\n\n\nAllocation of public ips. Choose between none, master, all\n\n\nYes\n\n\nNone\n\n\nmaster\n\n\n\n\n\n\nnetwork_request\n\n\nNumber of private networks\n\n\nYes\n\n\nNone\n\n\n1\n\n\n\n\n\n\nproject_name\n\n\nName of the project\n\n\nYes\n\n\nNone\n\n\nlambda.grnet.gr\n\n\n\n\n\n\npublic_key_name\n\n\nName of public key to use for lambda instance\n\n\nNo\n\n\nNone\n\n\nmy public key\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to create a new lambda instance, using the specs specified in the json-formatted body, and the authentication token specified by HTTP header.\n\n\nThe request in curl\n\n\ncurl -X POST -H \nContent-Type: application/json\n \\\n -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\n \\\n -d '{\nproject_name\n: \nlambda.grnet.gr\n, \ninstance_name\n: \nMy first Lambda Instance\n, \nnetwork_request\n: 1,\\\n \nmaster_name\n: \nlambda-master\n, \nvcpus_master\n: 4, \ndisk_slave\n: 40, \nslaves\n: 1, \nram_slave\n: 4096, \\\n \nram_master\n: 4096, \nvcpus_slave\n: 4, \nip_allocation\n: \nmaster\n, \ndisk_master\n: 40}' \\\n 'https://\nhostname\n/api/lambda-instance/'\n\n\n\n\nResponse body\n\n\nIf the authentication token and url is correct, and all the headers are given correctly, a sample response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nYour request to create a new lambda instance has been accepted\n,\n    \ncode\n: 202\n  },\n  \ndata\n: [\n    {\n      \nid\n: \ndd0c8d65-0c52-4338-bcc1-6f82e57f2d37\n,\n      \nlinks\n: {\n        \nself\n: \nhttps://\nhostname\n/api/lambda-instances/dd0c8d65-0c52-4338-bcc1-6f82e57f2d37\n\n      }\n    }\n  ]\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Create Lambda Instance"
        }, 
        {
            "location": "/service-api/CreateLambdaInstance/#api-create-lambda-instance-description", 
            "text": "Lambda instance creation call. Given an authentication token through the header authentication,\nand the instance specifications through other HTTP headers,\nit will firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will start creating a new lambda instance\nusing the instance specifications provided via the HTTP headers. For creating the cluster,\nthe Fokia library will be used. This library firstly uses kamaki to create the desired cluster of\nVMs, then runs ansible on the VMs to build a complete lambda instance. After starting the lambda\ninstance creation, the API will reply with the details of the cluster in creation, along with a\n\"200 Success\" code.", 
            "title": "API - create lambda instance - Description"
        }, 
        {
            "location": "/service-api/CreateLambdaInstance/#basic-parameters", 
            "text": "Type  Description      Description  Create a new lambda instance    URL  /api/lambda-instance/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceu...     Body     Type  Description  Required  Default value  Example value      instance_name  Name of the lambda instance  Yes  None  My first Lambda Instance    master_name  Name of the master node  Yes  None  lambda-master    slaves  Number of slaves  Yes  None  3    vcpus_master  Number of CPUs of the master node  Yes  None  4    vcpus_slave  Number of CPUs of each slave node  Yes  None  2    ram_master  Amount of RAM of master node in MB  Yes  None  4096    ram_master  Amount of RAM of each slave node in MB  Yes  None  2048    disk_master  Amount of HDD space of master node in GB  Yes  None  40    disk_slave  Amount of HDD space of each slave node in GB  Yes  None  40    ip_allocation  Allocation of public ips. Choose between none, master, all  Yes  None  master    network_request  Number of private networks  Yes  None  1    project_name  Name of the project  Yes  None  lambda.grnet.gr    public_key_name  Name of public key to use for lambda instance  No  None  my public key", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/CreateLambdaInstance/#example", 
            "text": "In this example we are going to create a new lambda instance, using the specs specified in the json-formatted body, and the authentication token specified by HTTP header.  The request in curl  curl -X POST -H  Content-Type: application/json  \\\n -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR  \\\n -d '{ project_name :  lambda.grnet.gr ,  instance_name :  My first Lambda Instance ,  network_request : 1,\\\n  master_name :  lambda-master ,  vcpus_master : 4,  disk_slave : 40,  slaves : 1,  ram_slave : 4096, \\\n  ram_master : 4096,  vcpus_slave : 4,  ip_allocation :  master ,  disk_master : 40}' \\\n 'https:// hostname /api/lambda-instance/'  Response body  If the authentication token and url is correct, and all the headers are given correctly, a sample response is  {\n   status : {\n     short_description :  Your request to create a new lambda instance has been accepted ,\n     code : 202\n  },\n   data : [\n    {\n       id :  dd0c8d65-0c52-4338-bcc1-6f82e57f2d37 ,\n       links : {\n         self :  https:// hostname /api/lambda-instances/dd0c8d65-0c52-4338-bcc1-6f82e57f2d37 \n      }\n    }\n  ]\n}  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/LambdaInstancesList/", 
            "text": "API - lambda instances list - Description\n\n\nLambda instances list call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will return all the lambda\ninstances in JSON format along with a \"200 OK\" code. If there are no lambda instances the array\nof the returned lambda instances will be empty. Lambda instances can be viewed in pages with\na specified number of instances per page. This is possible by specifying the \"limit\" and \"offset\"\nGET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without\n\"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API\nwill reply with a \"400 Bad Request\" code.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nLists all lambda instances\n\n\n\n\n\n\nURL\n\n\n/api/lambda-instances/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber of lambda instances on each page\n\n\nNo\n\n\nNone\n\n\n3\n\n\n\n\n\n\noffset\n\n\nthe first lambda instance of the page\n\n\nNo\n\n\nNone\n\n\n2\n\n\n\n\n\n\n\n\nKeywords in response\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the lambda instance\n\n\nLambda Instance\n\n\n\n\n\n\nid\n\n\nUnique key identifying a lambda instance\n\n\nNone\n\n\n\n\n\n\nstatus\n\n\nThe status code of the response\n\n\nNone\n\n\n\n\n\n\nnext\n\n\nThe URL to be used to list the next lambda instance\n\n\nnull\n\n\n\n\n\n\nprevious\n\n\nThe URL to be used to list the previous lambda instance\n\n\nnull\n\n\n\n\n\n\ncount\n\n\nThe number of existing lambda instances\n\n\nNone\n\n\n\n\n\n\ncode\n\n\nA code defining the state of the lambda instance\n\n\n2\n\n\n\n\n\n\nmessage\n\n\nA literal explaining the code\n\n\nPENDING\n\n\n\n\n\n\ndetail\n\n\nSome details for the message\n\n\nLambda instance installation is pending.\n\n\n\n\n\n\nfailure_message\n\n\nAn optional message in case something went wrong\n\n\nNone\n\n\n\n\n\n\nrunning_app\n\n\nA boolean value, specifying if the lambda instance is running any application\n\n\ntrue\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to list all the available lambda instances.\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'https://\nhostname\n/api/lambda-instances/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLambda instances\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nname\n: \nMy first Lambda Instance\n,\n      \nid\n: \n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n,\n      \nstatus\n: {\n        \nmessage\n: \nSTARTED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nLambda instance has been started.\n\n      },\n      \nrunning_app\n: false,\n    },\n    {\n      \nname\n: \nLambda Instance 1\n,\n      \nid\n: \nbc206a2a-b220-43e5-9d76-a7774de5c377\n,\n      \nstatus\n: {\n        \nmessage\n: \nSTARTED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nLambda instance has been started.\n\n      },\n      \nrunning_app\n: true,\n    },\n    {\n      \nname\n: \nLambda Instance 2\n,\n      \nid\n: \nb141f48c-787b-4345-af6d-1e2e84a45c7e\n,\n      \nstatus\n: {\n        \nmessage\n: \nSTARTED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nLambda instance has been started.\n\n      },\n      \nrunning_app\n: false,\n    },\n    {\n      \nname\n: \nLambda Instance 3\n,\n      \nid\n: \n8d8b574b-742e-4b90-9926-3c034dc40516\n,\n      \nstatus\n: {\n        \nmessage\n: \nSTARTED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nLambda instance has been started.\n\n      },\n      \nrunning_app\n: true,\n    },\n    {\n      \nname\n: \nLambda Instance 4\n,\n      \nid\n: \nbbe29514-4f21-4960-89b3-becd82515ef3\n,\n      \nstatus\n: {\n        \nmessage\n: \nKAFKA_FAILED\n,\n        \ncode\n: \n17\n,\n        \ndetail\n: \nApache Kafka installation and configuration have failed.\n\n        \nfailure_message\n: \nAnsible task failed\n\n      },\n      \nrunning_app\n: false,\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nIn this example we are going to list a limit of 2 lambda instances, starting from the third lambda instance.\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n 'https://\nhostname\n/api/lambda-instances/?limit=2\noffset=3'\n\n\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \npagination\n: {\n    \ncount\n:5,\n    \nnext\n:null,\n    \nprevious\n:\nhttps://\nhostname\n/api/lambda-instances/?limit=2\noffset=1\n,\n  },\n  \ndata\n:[{\n      \nname\n:\nLambda Instance 3\n,\n      \nid\n:\n8d8b574b-742e-4b90-9926-3c034dc40516\n,\n      \nstatus\n: {\n        \nmessage\n: \nSTARTED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nLambda instance has been started.\n\n      },\n      \nrunning_app\n: true,\n    },\n    {\n      \nname\n:\nLambda Instance 4\n,\n      \nid\n:\nbbe29514-4f21-4960-89b3-becd82515ef3\n,\n      \nstatus\n: {\n        \nmessage\n: \nKAFKA_FAILED\n,\n        \ncode\n: \n17\n,\n        \ndetail\n: \nApache Kafka installation and configuration have failed.\n\n        \nfailure_message\n: \nAnsible task failed\n\n      },\n      \nrunning_app\n: false,\n    }\n  ],\n  \nstatus\n: {\n    \nshort_description\n: \nLambda instances.\n,\n    \ncode\n: 200\n  }\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 400 BAD REQUEST : (Fail)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "List Lambda Instances"
        }, 
        {
            "location": "/service-api/LambdaInstancesList/#api-lambda-instances-list-description", 
            "text": "Lambda instances list call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will return all the lambda\ninstances in JSON format along with a \"200 OK\" code. If there are no lambda instances the array\nof the returned lambda instances will be empty. Lambda instances can be viewed in pages with\na specified number of instances per page. This is possible by specifying the \"limit\" and \"offset\"\nGET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without\n\"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API\nwill reply with a \"400 Bad Request\" code.", 
            "title": "API - lambda instances list - Description"
        }, 
        {
            "location": "/service-api/LambdaInstancesList/#basic-parameters", 
            "text": "Type  Description      Description  Lists all lambda instances    URL  /api/lambda-instances/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      limit  number of lambda instances on each page  No  None  3    offset  the first lambda instance of the page  No  None  2     Keywords in response     Name  Description  Default value      name  The name of the lambda instance  Lambda Instance    id  Unique key identifying a lambda instance  None    status  The status code of the response  None    next  The URL to be used to list the next lambda instance  null    previous  The URL to be used to list the previous lambda instance  null    count  The number of existing lambda instances  None    code  A code defining the state of the lambda instance  2    message  A literal explaining the code  PENDING    detail  Some details for the message  Lambda instance installation is pending.    failure_message  An optional message in case something went wrong  None    running_app  A boolean value, specifying if the lambda instance is running any application  true", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/LambdaInstancesList/#example", 
            "text": "In this example we are going to list all the available lambda instances.  The request in curl  curl -X GET -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'https:// hostname /api/lambda-instances/'  Response body  If the authentication token is correct, a sample response is  {\n   status : {\n     short_description :  Lambda instances ,\n     code : 200\n  },\n   data : [\n    {\n       name :  My first Lambda Instance ,\n       id :  9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c ,\n       status : {\n         message :  STARTED ,\n         code :  0 ,\n         detail :  Lambda instance has been started. \n      },\n       running_app : false,\n    },\n    {\n       name :  Lambda Instance 1 ,\n       id :  bc206a2a-b220-43e5-9d76-a7774de5c377 ,\n       status : {\n         message :  STARTED ,\n         code :  0 ,\n         detail :  Lambda instance has been started. \n      },\n       running_app : true,\n    },\n    {\n       name :  Lambda Instance 2 ,\n       id :  b141f48c-787b-4345-af6d-1e2e84a45c7e ,\n       status : {\n         message :  STARTED ,\n         code :  0 ,\n         detail :  Lambda instance has been started. \n      },\n       running_app : false,\n    },\n    {\n       name :  Lambda Instance 3 ,\n       id :  8d8b574b-742e-4b90-9926-3c034dc40516 ,\n       status : {\n         message :  STARTED ,\n         code :  0 ,\n         detail :  Lambda instance has been started. \n      },\n       running_app : true,\n    },\n    {\n       name :  Lambda Instance 4 ,\n       id :  bbe29514-4f21-4960-89b3-becd82515ef3 ,\n       status : {\n         message :  KAFKA_FAILED ,\n         code :  17 ,\n         detail :  Apache Kafka installation and configuration have failed. \n         failure_message :  Ansible task failed \n      },\n       running_app : false,\n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  In this example we are going to list a limit of 2 lambda instances, starting from the third lambda instance.  The request in curl  curl -X GET -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  'https:// hostname /api/lambda-instances/?limit=2 offset=3'  If the authentication token is correct, a sample response is  {\n   pagination : {\n     count :5,\n     next :null,\n     previous : https:// hostname /api/lambda-instances/?limit=2 offset=1 ,\n  },\n   data :[{\n       name : Lambda Instance 3 ,\n       id : 8d8b574b-742e-4b90-9926-3c034dc40516 ,\n       status : {\n         message :  STARTED ,\n         code :  0 ,\n         detail :  Lambda instance has been started. \n      },\n       running_app : true,\n    },\n    {\n       name : Lambda Instance 4 ,\n       id : bbe29514-4f21-4960-89b3-becd82515ef3 ,\n       status : {\n         message :  KAFKA_FAILED ,\n         code :  17 ,\n         detail :  Apache Kafka installation and configuration have failed. \n         failure_message :  Ansible task failed \n      },\n       running_app : false,\n    }\n  ],\n   status : {\n     short_description :  Lambda instances. ,\n     code : 200\n  }\n}  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 400 BAD REQUEST : (Fail)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/LambdaInstancesCount/", 
            "text": "API - lambda instances count - Description\n\n\nLambda Instances count call, given an authentication token through the header Authorization,\nwill return the number of the Lambda Instances that are currently on the database and are not\ndestroyed, given that the token is valid. The status code of the response will be \"200 Success\".\nIf the token is invalid, the API will reply with a \"401 Unauthorized\" error along with details\nregarding the error.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nCount lambda instances\n\n\n\n\n\n\nURL\n\n\n/api/lambda-instances/count/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to get the count of the lambda instances\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n 'https://\nhostname\n/api/lambda-instances/count/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct then a possible response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nNumber of Lambda Instances\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \ncount\n: 2\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Count Lambda Instances"
        }, 
        {
            "location": "/service-api/LambdaInstancesCount/#api-lambda-instances-count-description", 
            "text": "Lambda Instances count call, given an authentication token through the header Authorization,\nwill return the number of the Lambda Instances that are currently on the database and are not\ndestroyed, given that the token is valid. The status code of the response will be \"200 Success\".\nIf the token is invalid, the API will reply with a \"401 Unauthorized\" error along with details\nregarding the error.", 
            "title": "API - lambda instances count - Description"
        }, 
        {
            "location": "/service-api/LambdaInstancesCount/#basic-parameters", 
            "text": "Type  Description      Description  Count lambda instances    URL  /api/lambda-instances/count/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/LambdaInstancesCount/#example", 
            "text": "In this example we are going to get the count of the lambda instances  The request in curl  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  'https:// hostname /api/lambda-instances/count/'  Response body  If the authentication token is correct then a possible response is  {\n   status : {\n     short_description :  Number of Lambda Instances ,\n     code : 200\n  },\n   data : [\n    {\n       count : 2\n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/LambdaInstanceDetails/", 
            "text": "API - lambda instance details - Description\n\n\nLambda instance details call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will search for the specified lambda\ninstance. If the specified lambda instance does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified lambda instance exists, the API will reply with the details\nof it along with a \"200 OK\" code. It is possible to only get the status relevant details or the\ninformation relevant details of the lambda instance. This can be done by using the \"filter\" GET\nparameter with the request. The values that this parameter should have are \"info\" or \"status\".\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nGet details of a specified lambda instance\n\n\n\n\n\n\nURL\n\n\n/api/lambda-instances/[lambda-instance-id]/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the specified lambda instance. For more information see \nList Lambda instances page\n .\n\n\nYes\n\n\nNone\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\nfilter\n\n\nSpecifies which details to return\n\n\nNo\n\n\nNone\n\n\ninfo\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to get the details of the lambda instance with id 3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'https://\nhostname\n/api/lambda-instances/3f763964-d519-4fd2-916d-b5cfbe3b878b/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLambda instance details\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \ninfo\n: {\n        \ninstance_info\n: {\n          \nproject_name\n: \nlambda.grnet.gr\n,\n          \nmaster_name\n: \nlambda-master-2\n,\n          \nvcpus_master\n: 4,\n          \nnetwork_request\n: 1,\n          \ndisk_slave\n: 20,\n          \nslaves\n: 2,\n          \nram_slave\n: 4096,\n          \nram_master\n: 4096,\n          \nvcpus_slave\n: 4,\n          \nip_allocation\n: \nmaster\n,\n          \ndisk_master\n: 20,\n          \nmaster_node_id\n: 10000\n        },\n        \nid\n: \n3f763964-d519-4fd2-916d-b5cfbe3b878b\n,\n        \nname\n: \nMy first Lambda Instance\n\n      },\n      \nstatus\n: {\n        \nmessage\n: \nCLUSTER_FAILED\n,\n        \ncode\n: \n11\n,\n        \ndetails\n: \n~okeanos cluster build has failed.\n,\n        \nfailure_message\n: \nCyclades VMs out of limit\\n\n\n      }\n      \napplications\n: [\n        {\n          \nname\n: \nproject.jar\n\n          \nstarted\n: true,\n          \ntype\n: \nBATCH\n,\n          \nid\n: \neb9b1cda-1c81-4850-92f3-897b01d4685c\n\n        }\n      ]\n    }\n  ]\n}\n\n\n\n\nIn this example we are going to get only the status details of the lambda instance with id 3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n 'https://\nhostname\n/api/lambda-instances/3f763964-d519-4fd2-916d-b5cfbe3b878b/?filter=status'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLambda instance details.\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nstatus\n: {\n        \nmessage\n: \nCLUSTER_FAILED\n,\n        \ncode\n: \n11\n,\n        \ndetails\n: \n~okeanos cluster build has failed.\n,\n        \nfailure_message\n: \nCyclades VMs out of limit\\n\n\n      },\n      \nid\n: \n3f763964-d519-4fd2-916d-b5cfbe3b878b\n,\n      \nname\n: \nMy first Lambda Instance\n\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Details of a Lambda Instance"
        }, 
        {
            "location": "/service-api/LambdaInstanceDetails/#api-lambda-instance-details-description", 
            "text": "Lambda instance details call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will search for the specified lambda\ninstance. If the specified lambda instance does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified lambda instance exists, the API will reply with the details\nof it along with a \"200 OK\" code. It is possible to only get the status relevant details or the\ninformation relevant details of the lambda instance. This can be done by using the \"filter\" GET\nparameter with the request. The values that this parameter should have are \"info\" or \"status\".", 
            "title": "API - lambda instance details - Description"
        }, 
        {
            "location": "/service-api/LambdaInstanceDetails/#basic-parameters", 
            "text": "Type  Description      Description  Get details of a specified lambda instance    URL  /api/lambda-instances/[lambda-instance-id]/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS     Parameters     Name  Description  Required  Default value  Example value      lambda-instance-id  The id of the specified lambda instance. For more information see  List Lambda instances page  .  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b    filter  Specifies which details to return  No  None  info", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/LambdaInstanceDetails/#example", 
            "text": "In this example we are going to get the details of the lambda instance with id 3f763964-d519-4fd2-916d-b5cfbe3b878b  The request in curl  curl -X GET -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'https:// hostname /api/lambda-instances/3f763964-d519-4fd2-916d-b5cfbe3b878b/'  Response body  If the authentication token is correct, a sample response is  {\n   status : {\n     short_description :  Lambda instance details ,\n     code : 200\n  },\n   data : [\n    {\n       info : {\n         instance_info : {\n           project_name :  lambda.grnet.gr ,\n           master_name :  lambda-master-2 ,\n           vcpus_master : 4,\n           network_request : 1,\n           disk_slave : 20,\n           slaves : 2,\n           ram_slave : 4096,\n           ram_master : 4096,\n           vcpus_slave : 4,\n           ip_allocation :  master ,\n           disk_master : 20,\n           master_node_id : 10000\n        },\n         id :  3f763964-d519-4fd2-916d-b5cfbe3b878b ,\n         name :  My first Lambda Instance \n      },\n       status : {\n         message :  CLUSTER_FAILED ,\n         code :  11 ,\n         details :  ~okeanos cluster build has failed. ,\n         failure_message :  Cyclades VMs out of limit\\n \n      }\n       applications : [\n        {\n           name :  project.jar \n           started : true,\n           type :  BATCH ,\n           id :  eb9b1cda-1c81-4850-92f3-897b01d4685c \n        }\n      ]\n    }\n  ]\n}  In this example we are going to get only the status details of the lambda instance with id 3f763964-d519-4fd2-916d-b5cfbe3b878b  The request in curl  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  'https:// hostname /api/lambda-instances/3f763964-d519-4fd2-916d-b5cfbe3b878b/?filter=status'  Response body  If the authentication token is correct, a sample response is  {\n   status : {\n     short_description :  Lambda instance details. ,\n     code : 200\n  },\n   data : [\n    {\n       status : {\n         message :  CLUSTER_FAILED ,\n         code :  11 ,\n         details :  ~okeanos cluster build has failed. ,\n         failure_message :  Cyclades VMs out of limit\\n \n      },\n       id :  3f763964-d519-4fd2-916d-b5cfbe3b878b ,\n       name :  My first Lambda Instance \n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/LambdaInstanceAction/", 
            "text": "API - lambda instance action - Description\n\n\nLambda instance action call, given an authentication token through the header authentication,\nwill first check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will search for the specified lambda\ninstance. If the specified lambda instance does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified lambda instance exists, the API will reply with a\n\"202 ACCEPTED\" code and will also begin to perform the specified action on the specified\nlambda instance. The available actions are \nstart\n and \nstop\n.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nStart or stop a specified lambda instance\n\n\n\n\n\n\nURL\n\n\napi/lambda-instances/[lambda-instance-id]/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the specified lambda instance. For more information see \nList Lambda instances page\n.\n\n\nYes\n\n\nNone\n\n\n3\n\n\n\n\n\n\naction\n\n\nThe action to perform on the lambda instance\n\n\nYes\n\n\nNone\n\n\nstart\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to start the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X POST -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n -F \naction=start\n \\\n 'https://\nhostname\n/api/lambda-instances/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/'\n\n\n\n\nResponse body\n\n\nIf the authentication is correct the response will be\n\n\n{\n  \nstatus\n: {\n    \ncode\n: 202,\n    \nshort-description\n: \nYour request has been accepted\n\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Actions on a Lambda Instance"
        }, 
        {
            "location": "/service-api/LambdaInstanceAction/#api-lambda-instance-action-description", 
            "text": "Lambda instance action call, given an authentication token through the header authentication,\nwill first check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will search for the specified lambda\ninstance. If the specified lambda instance does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified lambda instance exists, the API will reply with a\n\"202 ACCEPTED\" code and will also begin to perform the specified action on the specified\nlambda instance. The available actions are  start  and  stop .", 
            "title": "API - lambda instance action - Description"
        }, 
        {
            "location": "/service-api/LambdaInstanceAction/#basic-parameters", 
            "text": "Type  Description      Description  Start or stop a specified lambda instance    URL  api/lambda-instances/[lambda-instance-id]/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      lambda-instance-id  The id of the specified lambda instance. For more information see  List Lambda instances page .  Yes  None  3    action  The action to perform on the lambda instance  Yes  None  start", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/LambdaInstanceAction/#example", 
            "text": "In this example we are going to start the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X POST -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n -F  action=start  \\\n 'https:// hostname /api/lambda-instances/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/'  Response body  If the authentication is correct the response will be  {\n   status : {\n     code : 202,\n     short-description :  Your request has been accepted \n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/LambdaInstanceDestroy/", 
            "text": "API - lambda instance destroy - Description\n\n\nLambda instance destroy call, given an authentication token through the header Authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will reply with a \"202 ACCEPTED\" code\nand will start destroying all the VMs of the specified lambda instance along with the corresponding\npublic ip and private network.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nDestroy a specified lambda instance\n\n\n\n\n\n\nURL\n\n\napi/lambda-instances/[lambda-instance-id]/\n\n\n\n\n\n\nHTTP Method\n\n\nDELETE\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the specified lambda instance. For more information see \nList Lambda instances page\n.\n\n\nYes\n\n\nNone\n\n\n3\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to destroy the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X DELETE -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'https://\nhostname\n/api/lambda-instances/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct the response will be\n\n\n{\n  \nstatus\n: {\n    \ncode\n: 202,\n    \nshort-description\n: \nYour request to destroy the specified lambda instance has been accepted\n\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Destroy a Lambda Instance"
        }, 
        {
            "location": "/service-api/LambdaInstanceDestroy/#api-lambda-instance-destroy-description", 
            "text": "Lambda instance destroy call, given an authentication token through the header Authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will reply with a \"202 ACCEPTED\" code\nand will start destroying all the VMs of the specified lambda instance along with the corresponding\npublic ip and private network.", 
            "title": "API - lambda instance destroy - Description"
        }, 
        {
            "location": "/service-api/LambdaInstanceDestroy/#basic-parameters", 
            "text": "Type  Description      Description  Destroy a specified lambda instance    URL  api/lambda-instances/[lambda-instance-id]/    HTTP Method  DELETE    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      lambda-instance-id  The id of the specified lambda instance. For more information see  List Lambda instances page .  Yes  None  3", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/LambdaInstanceDestroy/#example", 
            "text": "In this example we are going to destroy the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X DELETE -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'https:// hostname /api/lambda-instances/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/'  Response body  If the authentication token is correct the response will be  {\n   status : {\n     code : 202,\n     short-description :  Your request to destroy the specified lambda instance has been accepted \n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/ApplicationUpload/", 
            "text": "API - application upload - Description\n\n\nApplication upload call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will reply with a \"202 ACCEPTED\" code\nand will start uploading the provided application to Pithos+.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nUpload an application\n\n\n\n\n\n\nURL\n\n\napi/apps/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\ndescription\n\n\nA description of the application\n\n\nNo\n\n\nNone\n\n\n\n\n\n\n\n\nfile\n\n\nThe application file\n\n\nYes\n\n\nNone\n\n\n\n\n\n\n\n\ntype\n\n\nThe application type (batch/streaming)\n\n\nYes\n\n\nNone\n\n\n\n\n\n\n\n\nproject_name\n\n\nThe ~okeanos project name that has the needed quotas on Pithos+\n\n\nNo\n\n\nNone\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to upload an application with description \"My application\", file\nname \"test_project\" and project name \"lambda.grnet.gr\".\n\n\nThe request in curl\n\n\ncurl -X POST -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n -F \ndescription=My application\n  \\\n -F \nfile=@batch-1.0-jar-with-dependencies.jar\n \\\n -F \ntype=batch\n \\\n -F \nproject_name=lambda.grnet.gr\n \\\n -F \nexecution_environment_name=Batch\n \\\n 'https://\nhostname\n/api/apps/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response would be\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nYour request to upload the specified application has been accepted\n,\n    \ncode\n: 202\n  },\n  \ndata\n: [\n    {\n      \nid\n: \n84dfb596-3abb-401e-99fc-c6f0057dedab\n,\n      \nlinks\n: {\n        \nself\n: \nhttps://\nhostname\n/api/apps/84dfb596-3abb-401e-99fc-c6f0057dedab\n\n      }\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 201 OK : (Success)\n\n\nHTTP/1.1 400 BAD REQUEST : (Fail)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Upload an Application"
        }, 
        {
            "location": "/service-api/ApplicationUpload/#api-application-upload-description", 
            "text": "Application upload call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will reply with a \"202 ACCEPTED\" code\nand will start uploading the provided application to Pithos+.", 
            "title": "API - application upload - Description"
        }, 
        {
            "location": "/service-api/ApplicationUpload/#basic-parameters", 
            "text": "Type  Description      Description  Upload an application    URL  api/apps/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      description  A description of the application  No  None     file  The application file  Yes  None     type  The application type (batch/streaming)  Yes  None     project_name  The ~okeanos project name that has the needed quotas on Pithos+  No  None", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/ApplicationUpload/#example", 
            "text": "In this example we are going to upload an application with description \"My application\", file\nname \"test_project\" and project name \"lambda.grnet.gr\".  The request in curl  curl -X POST -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n -F  description=My application   \\\n -F  file=@batch-1.0-jar-with-dependencies.jar  \\\n -F  type=batch  \\\n -F  project_name=lambda.grnet.gr  \\\n -F  execution_environment_name=Batch  \\\n 'https:// hostname /api/apps/'  Response body  If the authentication token is correct, a sample response would be  {\n   status : {\n     short_description :  Your request to upload the specified application has been accepted ,\n     code : 202\n  },\n   data : [\n    {\n       id :  84dfb596-3abb-401e-99fc-c6f0057dedab ,\n       links : {\n         self :  https:// hostname /api/apps/84dfb596-3abb-401e-99fc-c6f0057dedab \n      }\n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 201 OK : (Success)  HTTP/1.1 400 BAD REQUEST : (Fail)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/ApplicationDelete/", 
            "text": "API - application delete - Description\n\n\nApplication delete call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will search for the specified\napplication. If the specified application does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified application exists, the API will reply with a\n\"202 ACCEPTED\" code and will start deleting the specified application from Pithos+.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nDelete an application\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/\n\n\n\n\n\n\nHTTP Method\n\n\nDELETE\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\napplication-id\n\n\nThe id of the specified application. For more information see \nList Applications\n.\n\n\nYes\n\n\nNone\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to delete the application with id 84dfb596-3abb-401e-99fc-c6f0057dedab\n\n\nThe request in curl\n\n\ncurl -X DELETE -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n'https://\nhostname\n/api/apps/84dfb596-3abb-401e-99fc-c6f0057dedab/'\n\n\n\n\nResponse body\n\n\n{\n  \nstatus\n: {\n    \nshort-description\n: \nYour request to delete the specified application has been accepted\n,\n    \ncode\n: 202\n  }\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 201 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Delete an Application"
        }, 
        {
            "location": "/service-api/ApplicationDelete/#api-application-delete-description", 
            "text": "Application delete call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with\na \"401 Unauthorized\" code. If the token is valid, the API will search for the specified\napplication. If the specified application does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified application exists, the API will reply with a\n\"202 ACCEPTED\" code and will start deleting the specified application from Pithos+.", 
            "title": "API - application delete - Description"
        }, 
        {
            "location": "/service-api/ApplicationDelete/#basic-parameters", 
            "text": "Type  Description      Description  Delete an application    URL  /api/apps/[application-id]/    HTTP Method  DELETE    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      application-id  The id of the specified application. For more information see  List Applications .  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/ApplicationDelete/#example", 
            "text": "In this example we are going to delete the application with id 84dfb596-3abb-401e-99fc-c6f0057dedab  The request in curl  curl -X DELETE -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n'https:// hostname /api/apps/84dfb596-3abb-401e-99fc-c6f0057dedab/'  Response body  {\n   status : {\n     short-description :  Your request to delete the specified application has been accepted ,\n     code : 202\n  }\n}  Response messages  The main response messages are:   HTTP/1.1 201 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/ApplicationsList/", 
            "text": "API - applications list - Description\n\n\nApplications list call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will return all the applications in JSON format along with a \"200 OK\" code. If there are no applications the array\nof the returned applications will be empty. Applications can be viewed in pages with\na specified number of them per page. This is possible by specifying the \"limit\" and \"offset\"\nGET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without\n\"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API\nwill reply with a \"400 Bad Request\" code.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nList all applications\n\n\n\n\n\n\nURL\n\n\n/api/apps/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber of lambda instances on each page\n\n\nNo\n\n\nNone\n\n\n3\n\n\n\n\n\n\noffset\n\n\nthe first lambda instance of the page\n\n\nNo\n\n\nNone\n\n\n2\n\n\n\n\n\n\n\n\nKeywords in response\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nname\n\n\nThe name of the application\n\n\nNone\n\n\n\n\n\n\nid\n\n\nUnique key identifying a lambda i\n\n\nNone\n\n\n\n\n\n\nstatus\n\n\nThe status code of the response\n\n\nNone\n\n\n\n\n\n\nnext\n\n\nThe URL to be used to list the next lambda instance\n\n\nnull\n\n\n\n\n\n\nprevious\n\n\nThe URL to be used to list the previous lambda instance\n\n\nnull\n\n\n\n\n\n\ncount\n\n\nThe number of existing lambda instances\n\n\nNone\n\n\n\n\n\n\ndescription\n\n\nThe description of the application\n\n\nNone\n\n\n\n\n\n\ndeployed\n\n\nA boolean value, specifying if the application is deployed on any lambda instance\n\n\ntrue\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to list all the available applications.\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'https://\nhostname\n/api/apps/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nApplications\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nname\n: \nproject.jar\n,\n      \nid\n: \n68e836e2-2ea4-4bb8-8b46-dcef869b3f08\n,\n      \ntype\n: \nSTREAMING\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      },\n      \ndeployed\n: true,\n    },\n    {\n      \nname\n: \ntest_file\n,\n      \nid\n: \n1b9f7773-f19d-426d-bc29-5434844e4537\n,\n      \ntype\n: \nSTREAMING\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      },\n      \ndeployed\n: false,\n    },\n    {\n      \nname\n: \ntest_file_2\n,\n      \nid\n: \ndddb18ae-5dab-4e9e-8914-3062b8853e24\n,\n      \ntype\n: \nSTREAMING\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      },\n      \ndeployed\n: true,\n    },\n    {\n      \nname\n: \ntest_file_3\n,\n      \nid\n: \nb3e5d867-c882-4f5e-a5c2-75193866f44e\n,\n      \ntype\n: \nBATCH\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADING\n,\n        \ncode\n: \n1\n,\n        \ndetail\n: \nApplication is being uploaded\n\n      },\n      \ndeployed\n: false,\n    },\n    {\n      \nname\n: \ntest_file_4\n,\n      \nid\n: \na5623a2e-7742-4299-8ca4-c05e811d2262\n,\n      \ntype\n: \nBATCH\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      },\n      \ndeployed\n: true,\n    },\n    {\n      \nname\n: \nproject1.jar\n,\n      \nid\n: \n5bda8e92-6397-493d-9aeb-a2fcf67b19a4\n,\n      \ntype\n: \nSTREAMING\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      },\n      \ndeployed\n: true,\n    },\n    {\n      \nname\n: \napplication.jar\n,\n      \nid\n: \n6fb97497-8d2c-45ed-bb7d-207e16b97c48\n,\n      \ntype\n: \nBATCH\n,\n      \nstatus\n: {\n        \nmessage\n: \nFAILED\n,\n        \ncode\n: \n2\n,\n        \ndetail\n: \nApplication upload has failed\n,\n        \nfailure_message\n: \nCouldn't reach remote host\n\n      },\n      \ndeployed\n: false,\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nIn this example we are going to list a limit of 2 applications, starting from the third\napplication.\n\n\nThe request in url\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n 'https://\nhostname\n/api/apps/?limit=2\noffset=3'\n\n\n\n\nIf the authentication token is correct, a sample response is\n\n\n{\n  \ndata\n: [\n    {\n      \nname\n: \ntest_file_3\n,\n      \nid\n: \nb3e5d867-c882-4f5e-a5c2-75193866f44e\n,\n      \ntype\n: \nBATCH\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADING\n,\n        \ncode\n: \n1\n,\n        \ndetail\n: \nApplication is being uploaded\n\n      },\n      \ndeployed\n: false,\n    },\n    {\n      \nname\n: \ntest_file_4\n,\n      \nid\n: \na5623a2e-7742-4299-8ca4-c05e811d2262\n,\n      \ntype\n: \nBATCH\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded\n\n      },\n      \ndeployed\n: true,\n    }\n  ],\n  \npagination\n: {\n    \ncount\n: 7,\n    \nnext\n: \nhttps://\nhostname\n/api/apps/?limit=2\noffset=5\n,\n    \nprevious\n: \nhttps://\nhostname\n/api/apps/?limit=2\noffset=1\n\n  },\n  \nstatus\n: {\n    \nshort_description\n: \nApplications.\n,\n    \ncode\n: 200\n  }\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 400 BAD REQUEST : (Fail)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "List Applications"
        }, 
        {
            "location": "/service-api/ApplicationsList/#api-applications-list-description", 
            "text": "Applications list call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will return all the applications in JSON format along with a \"200 OK\" code. If there are no applications the array\nof the returned applications will be empty. Applications can be viewed in pages with\na specified number of them per page. This is possible by specifying the \"limit\" and \"offset\"\nGET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without\n\"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API\nwill reply with a \"400 Bad Request\" code.", 
            "title": "API - applications list - Description"
        }, 
        {
            "location": "/service-api/ApplicationsList/#basic-parameters", 
            "text": "Type  Description      Description  List all applications    URL  /api/apps/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      limit  number of lambda instances on each page  No  None  3    offset  the first lambda instance of the page  No  None  2     Keywords in response     Name  Description  Default value      name  The name of the application  None    id  Unique key identifying a lambda i  None    status  The status code of the response  None    next  The URL to be used to list the next lambda instance  null    previous  The URL to be used to list the previous lambda instance  null    count  The number of existing lambda instances  None    description  The description of the application  None    deployed  A boolean value, specifying if the application is deployed on any lambda instance  true", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/ApplicationsList/#example", 
            "text": "In this example we are going to list all the available applications.  The request in curl  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'https:// hostname /api/apps/'  Response body  If the authentication token is correct, a sample response is  {\n   status : {\n     short_description :  Applications ,\n     code : 200\n  },\n   data : [\n    {\n       name :  project.jar ,\n       id :  68e836e2-2ea4-4bb8-8b46-dcef869b3f08 ,\n       type :  STREAMING ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      },\n       deployed : true,\n    },\n    {\n       name :  test_file ,\n       id :  1b9f7773-f19d-426d-bc29-5434844e4537 ,\n       type :  STREAMING ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      },\n       deployed : false,\n    },\n    {\n       name :  test_file_2 ,\n       id :  dddb18ae-5dab-4e9e-8914-3062b8853e24 ,\n       type :  STREAMING ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      },\n       deployed : true,\n    },\n    {\n       name :  test_file_3 ,\n       id :  b3e5d867-c882-4f5e-a5c2-75193866f44e ,\n       type :  BATCH ,\n       status : {\n         message :  UPLOADING ,\n         code :  1 ,\n         detail :  Application is being uploaded \n      },\n       deployed : false,\n    },\n    {\n       name :  test_file_4 ,\n       id :  a5623a2e-7742-4299-8ca4-c05e811d2262 ,\n       type :  BATCH ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      },\n       deployed : true,\n    },\n    {\n       name :  project1.jar ,\n       id :  5bda8e92-6397-493d-9aeb-a2fcf67b19a4 ,\n       type :  STREAMING ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      },\n       deployed : true,\n    },\n    {\n       name :  application.jar ,\n       id :  6fb97497-8d2c-45ed-bb7d-207e16b97c48 ,\n       type :  BATCH ,\n       status : {\n         message :  FAILED ,\n         code :  2 ,\n         detail :  Application upload has failed ,\n         failure_message :  Couldn't reach remote host \n      },\n       deployed : false,\n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  In this example we are going to list a limit of 2 applications, starting from the third\napplication.  The request in url  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  'https:// hostname /api/apps/?limit=2 offset=3'  If the authentication token is correct, a sample response is  {\n   data : [\n    {\n       name :  test_file_3 ,\n       id :  b3e5d867-c882-4f5e-a5c2-75193866f44e ,\n       type :  BATCH ,\n       status : {\n         message :  UPLOADING ,\n         code :  1 ,\n         detail :  Application is being uploaded \n      },\n       deployed : false,\n    },\n    {\n       name :  test_file_4 ,\n       id :  a5623a2e-7742-4299-8ca4-c05e811d2262 ,\n       type :  BATCH ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded \n      },\n       deployed : true,\n    }\n  ],\n   pagination : {\n     count : 7,\n     next :  https:// hostname /api/apps/?limit=2 offset=5 ,\n     previous :  https:// hostname /api/apps/?limit=2 offset=1 \n  },\n   status : {\n     short_description :  Applications. ,\n     code : 200\n  }\n}  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 400 BAD REQUEST : (Fail)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/ApplicationsCount/", 
            "text": "API - applications count - Description\n\n\nApplications count call, given an authentication token through the header Authorization,\nwill return the number of the Applications that are currently on the database, given that\nthe token is valid. The status code of the response will be \"200 Success\".\nIf the token is invalid, the API will reply with a \"401 Unauthorized\" error along with details regarding the error.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nCount applications\n\n\n\n\n\n\nURL\n\n\n/api/apps/count/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to get the count of the applications\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n 'https://\nhostname\n/api/apps/count/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct then a possible response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nNumber of Applications\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \ncount\n: 2\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Count Applications"
        }, 
        {
            "location": "/service-api/ApplicationsCount/#api-applications-count-description", 
            "text": "Applications count call, given an authentication token through the header Authorization,\nwill return the number of the Applications that are currently on the database, given that\nthe token is valid. The status code of the response will be \"200 Success\".\nIf the token is invalid, the API will reply with a \"401 Unauthorized\" error along with details regarding the error.", 
            "title": "API - applications count - Description"
        }, 
        {
            "location": "/service-api/ApplicationsCount/#basic-parameters", 
            "text": "Type  Description      Description  Count applications    URL  /api/apps/count/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/ApplicationsCount/#example", 
            "text": "In this example we are going to get the count of the applications  The request in curl  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  'https:// hostname /api/apps/count/'  Response body  If the authentication token is correct then a possible response is  {\n   status : {\n     short_description :  Number of Applications ,\n     code : 200\n  },\n   data : [\n    {\n       count : 2\n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/ApplicationDetails/", 
            "text": "API - application details - Description\n\n\nApplication details call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will search for the specified application. If the specified application does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified application exists, the API will reply with the details\nof it along with a \"200 OK\" code.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nDetails of an application\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\napplication-id\n\n\nThe id of the specified lambda application. For more information see \nList applications page\n .\n\n\nYes\n\n\nNone\n\n\neb9b1cda-1c81-4850-92f3-897b01d4685c\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to get the details of the application with id eb9b1cda-1c81-4850-92f3-897b01d4685c\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n'https://\nhostname\n/api/apps/eb9b1cda-1c81-4850-92f3-897b01d4685c/'\n\n\n\n\nResponse body\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nApplication details\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nname\n: \ntest_file_1\n,\n      \npath\n: \nlambda_applications\n,\n      \ntype\n: \nBATCH\n,\n      \ndescription\n: \nMy first application\n,\n      \nstatus\n: {\n        \nmessage\n: \nUPLOADED\n,\n        \ncode\n: \n0\n,\n        \ndetail\n: \nApplication has been successfully uploaded.\n\n      },\n      \nlambda_instances\n: [\n        {\n          \nstarted\n: false,\n          \nid\n: \n3bc97580-45e1-4c39-90ae-0c2178431526\n,\n          \nname\n: \nMy first Lambda Instance\n\n          \nstatus\n: {\n            \nmessage\n: \nSTARTED\n,\n            \ncode\n: \n0\n,\n            \ndetail\n: \nLambda instance has been started\n\n          },\n        }\n      ],\n      \nid\n: \neb9b1cda-1c81-4850-92f3-897b01d4685c\n\n    }\n  ]\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Details of an Application"
        }, 
        {
            "location": "/service-api/ApplicationDetails/#api-application-details-description", 
            "text": "Application details call, given an authentication token through the header authentication,\nwill firstly check the validity of the token. If the token is invalid, the API will reply with a\n\"401 Unauthorized\" code. If the token is valid, the API will search for the specified application. If the specified application does not exist, the API will reply with a\n\"404 Not Found\" code. If the specified application exists, the API will reply with the details\nof it along with a \"200 OK\" code.", 
            "title": "API - application details - Description"
        }, 
        {
            "location": "/service-api/ApplicationDetails/#basic-parameters", 
            "text": "Type  Description      Description  Details of an application    URL  /api/apps/[application-id]/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS     Parameters     Name  Description  Required  Default value  Example value      application-id  The id of the specified lambda application. For more information see  List applications page  .  Yes  None  eb9b1cda-1c81-4850-92f3-897b01d4685c", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/ApplicationDetails/#example", 
            "text": "In this example we are going to get the details of the application with id eb9b1cda-1c81-4850-92f3-897b01d4685c  The request in curl  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n'https:// hostname /api/apps/eb9b1cda-1c81-4850-92f3-897b01d4685c/'  Response body  {\n   status : {\n     short_description :  Application details ,\n     code : 200\n  },\n   data : [\n    {\n       name :  test_file_1 ,\n       path :  lambda_applications ,\n       type :  BATCH ,\n       description :  My first application ,\n       status : {\n         message :  UPLOADED ,\n         code :  0 ,\n         detail :  Application has been successfully uploaded. \n      },\n       lambda_instances : [\n        {\n           started : false,\n           id :  3bc97580-45e1-4c39-90ae-0c2178431526 ,\n           name :  My first Lambda Instance \n           status : {\n             message :  STARTED ,\n             code :  0 ,\n             detail :  Lambda instance has been started \n          },\n        }\n      ],\n       id :  eb9b1cda-1c81-4850-92f3-897b01d4685c \n    }\n  ]\n}  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/ApplicationDeploy/", 
            "text": "API - application deploy - Description\n\n\nApplication deploy call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist. If any of these two doesn't exist, the API will reply with a \"404 Not Found\" code. If both the application and the lambda instance exist the API\nwill reply with a \"202 Accepted\" code and will start deploying the specified application on the specified lambda instance.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nDeploy an application on a selected lambda instance\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/deploy/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\napplication-id\n\n\nThe id of the application to be deployed\n\n\nYes\n\n\nNone\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\nlambda_instance_id\n\n\nThe id of the lambda instance on which the application will be deployed\n\n\nYes\n\n\nNone\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to deploy the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X POST -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n -F \nlambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n \\\n 'https://\nhostname\n/api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/deploy/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, the response will be\n\n\n{\n  \nstatus\n: {\n    \nshort-description\n: \nYour request to deploy the specified application has been accepted\n,\n    \ncode\n: 202\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Deploy an Application"
        }, 
        {
            "location": "/service-api/ApplicationDeploy/#api-application-deploy-description", 
            "text": "Application deploy call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist. If any of these two doesn't exist, the API will reply with a \"404 Not Found\" code. If both the application and the lambda instance exist the API\nwill reply with a \"202 Accepted\" code and will start deploying the specified application on the specified lambda instance.", 
            "title": "API - application deploy - Description"
        }, 
        {
            "location": "/service-api/ApplicationDeploy/#basic-parameters", 
            "text": "Type  Description      Description  Deploy an application on a selected lambda instance    URL  /api/apps/[application-id]/deploy/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      application-id  The id of the application to be deployed  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b    lambda_instance_id  The id of the lambda instance on which the application will be deployed  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/ApplicationDeploy/#example", 
            "text": "In this example we are going to deploy the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X POST -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n -F  lambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  \\\n 'https:// hostname /api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/deploy/'  Response body  If the authentication token is correct, the response will be  {\n   status : {\n     short-description :  Your request to deploy the specified application has been accepted ,\n     code : 202\n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/ApplicationWithdraw/", 
            "text": "API - application withdraw - Description\n\n\nApplication withdraw call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist. If any of these two doesn't exist, the API will reply with a \"404 Not Found\" code. If both the application and the lambda instance exist the API\nwill reply with a \"202 Accepted\" code and will start withdrawing the specified application from the specified lambda instance.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nWithdraw an application from a selected lamdba instance\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/withdraw/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\napplication-id\n\n\nThe id of the application to be withdrawn\n\n\nYes\n\n\nNone\n\n\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the lambda instance from which the application will be withdrawn\n\n\nYes\n\n\nNone\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to withdraw the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c from the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X POST -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n -F \nlambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n \\\n 'https://\nhostname\n/api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/withdraw/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, the response will be\n\n\n{\n  \nstatus\n: {\n    \nshort-description\n: \nYour request to withdraw the specified application has been accepted\n,\n    \ncode\n: 202\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Withdraw an Application"
        }, 
        {
            "location": "/service-api/ApplicationWithdraw/#api-application-withdraw-description", 
            "text": "Application withdraw call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist. If any of these two doesn't exist, the API will reply with a \"404 Not Found\" code. If both the application and the lambda instance exist the API\nwill reply with a \"202 Accepted\" code and will start withdrawing the specified application from the specified lambda instance.", 
            "title": "API - application withdraw - Description"
        }, 
        {
            "location": "/service-api/ApplicationWithdraw/#basic-parameters", 
            "text": "Type  Description      Description  Withdraw an application from a selected lamdba instance    URL  /api/apps/[application-id]/withdraw/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      application-id  The id of the application to be withdrawn  Yes  None     lambda-instance-id  The id of the lambda instance from which the application will be withdrawn  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/ApplicationWithdraw/#example", 
            "text": "In this example we are going to withdraw the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c from the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X POST -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n -F  lambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  \\\n 'https:// hostname /api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/withdraw/'  Response body  If the authentication token is correct, the response will be  {\n   status : {\n     short-description :  Your request to withdraw the specified application has been accepted ,\n     code : 202\n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/ApplicationsListDeployed/", 
            "text": "API - application list deployed - Description\n\n\napplication list deployed call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the specified lambda instance exists. If it doesn't, the API will response with a \"404 Not Found\" code. If the specified lambda instance exists, the API will return all the applications deployed on that lambda instance in JSON format along with a \"200 OK\" code. If there are no lambda instances the array of the returned applications will be empty. Applications can be viewed in pages with a specified number of instances per page. This is possible by specifying the \"limit\" and \"offset\" GET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without \"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API will reply with a \"400 Bad Request\" code.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nGet a list of deployed applications\n\n\n\n\n\n\nURL\n\n\n/api/apps/[lambda-instance-id]/list-deployed/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the lambda instance\n\n\nYes\n\n\nNone\n\n\n3f763964-d519-4fd2-916d-b5cfbe3b878b\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to list all the deployed application on the lambda instance\nwith id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n 'https://\nhostname\n/api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, a sample response would be\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nApplications\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nname\n: \ntest_file_5\n,\n      \nid\n: \nd2e00532-d643-434c-9717-cd923a77f331\n\n    },\n    {\n      \nname\n: \ntest_big\n,\n      \nid\n: \n7186be3f-22ca-4e59-8e5f-fc381e92a67c\n\n    },\n    {\n      \nname\n: \ntest_file\n,\n      \nid\n: \n7c177dc2-4196-4b6e-ad43-4e316273ec39\n\n    },\n    {\n      \nname\n: \ntest_file_1\n,\n      \nid\n: \n4abe753e-84b8-43f5-9f1e-b97b120609f8\n\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nIn this example we are going to list a limit of 2 applications, starting from the third\napplication that are deployed on the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X GET -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n 'https://\nhostname\n/api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/?limit=2\noffset=3'\n\n\n\n\nIf the authentication token is correct, a sample response would be\n\n\n{\n  \npagination\n: {\n    \ncount\n: 4,\n    \nnext\n: null,\n    \nprevious\n: \nhttps://\nhostname\n/api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/?limit=2\noffset=1\n,\n  },\n  \ndata\n: [\n    {\n      \nname\n: \ntest_file_1\n,\n      \nid\n: \n4abe753e-84b8-43f5-9f1e-b97b120609f8\n\n    }\n  ],\n  \nstatus\n: {\n    \nshort_description\n: \nApplications.\n,\n    \ncode\n: 200\n  }\n}\n\n\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "List Deployed Applications"
        }, 
        {
            "location": "/service-api/ApplicationsListDeployed/#api-application-list-deployed-description", 
            "text": "application list deployed call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the specified lambda instance exists. If it doesn't, the API will response with a \"404 Not Found\" code. If the specified lambda instance exists, the API will return all the applications deployed on that lambda instance in JSON format along with a \"200 OK\" code. If there are no lambda instances the array of the returned applications will be empty. Applications can be viewed in pages with a specified number of instances per page. This is possible by specifying the \"limit\" and \"offset\" GET variables on the URL of the call(offset can be ommited). If \"offset\" is specified without \"limit\", or has a zero or negative value, it will be ignored. If \"limit\" is less than zero, the API will reply with a \"400 Bad Request\" code.", 
            "title": "API - application list deployed - Description"
        }, 
        {
            "location": "/service-api/ApplicationsListDeployed/#basic-parameters", 
            "text": "Type  Description      Description  Get a list of deployed applications    URL  /api/apps/[lambda-instance-id]/list-deployed/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      lambda-instance-id  The id of the lambda instance  Yes  None  3f763964-d519-4fd2-916d-b5cfbe3b878b", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/ApplicationsListDeployed/#example", 
            "text": "In this example we are going to list all the deployed application on the lambda instance\nwith id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n 'https:// hostname /api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/'  Response body  If the authentication token is correct, a sample response would be  {\n   status : {\n     short_description :  Applications ,\n     code : 200\n  },\n   data : [\n    {\n       name :  test_file_5 ,\n       id :  d2e00532-d643-434c-9717-cd923a77f331 \n    },\n    {\n       name :  test_big ,\n       id :  7186be3f-22ca-4e59-8e5f-fc381e92a67c \n    },\n    {\n       name :  test_file ,\n       id :  7c177dc2-4196-4b6e-ad43-4e316273ec39 \n    },\n    {\n       name :  test_file_1 ,\n       id :  4abe753e-84b8-43f5-9f1e-b97b120609f8 \n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  In this example we are going to list a limit of 2 applications, starting from the third\napplication that are deployed on the lambda instance with id 9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X GET -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  'https:// hostname /api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/?limit=2 offset=3'  If the authentication token is correct, a sample response would be  {\n   pagination : {\n     count : 4,\n     next : null,\n     previous :  https:// hostname /api/apps/9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c/list-deployed/?limit=2 offset=1 ,\n  },\n   data : [\n    {\n       name :  test_file_1 ,\n       id :  4abe753e-84b8-43f5-9f1e-b97b120609f8 \n    }\n  ],\n   status : {\n     short_description :  Applications. ,\n     code : 200\n  }\n}  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/ApplicationStart/", 
            "text": "API - application start - Description\n\n\nApplication start call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist, and if the application is deployed on the instance. If any of these conditions is not met, the API will reply with a \"404 Not Found\" code. If the application has already been started on the specified lambda instance, or the respective job type slot on the lambda instance is occupied, the API will reply with a \"409 Conflict\" code. If the application is deployed on the lambda instance, has not been started, and its job slot is free, the API\nwill reply with a \"202 Accepted\" code and will start the application on the lambda instance.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nStart an application on a selected lambda instance\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/start/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\napplication-id\n\n\nThe id of the application to be started\n\n\nYes\n\n\nNone\n\n\n7186be3f-22ca-4e59-8e5f-fc381e92a67c\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the lambda instance on which the application will be started\n\n\nYes\n\n\nNone\n\n\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to start the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\n   curl -X POST -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n  \\\n   -F \nlambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n  \\\n   'https://\nhostname\n/api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/start/' \n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, the response will be\n\n\n{\n  \nstatus\n: {\n    \nshort-description\n: \nYour request to start the specified application has been accepted\n,\n    \ncode\n: 202\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)\n\n\nHTTP/1.1 409 CONFLICT : (Fail)", 
            "title": "Start an Application"
        }, 
        {
            "location": "/service-api/ApplicationStart/#api-application-start-description", 
            "text": "Application start call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist, and if the application is deployed on the instance. If any of these conditions is not met, the API will reply with a \"404 Not Found\" code. If the application has already been started on the specified lambda instance, or the respective job type slot on the lambda instance is occupied, the API will reply with a \"409 Conflict\" code. If the application is deployed on the lambda instance, has not been started, and its job slot is free, the API\nwill reply with a \"202 Accepted\" code and will start the application on the lambda instance.", 
            "title": "API - application start - Description"
        }, 
        {
            "location": "/service-api/ApplicationStart/#basic-parameters", 
            "text": "Type  Description      Description  Start an application on a selected lambda instance    URL  /api/apps/[application-id]/start/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      application-id  The id of the application to be started  Yes  None  7186be3f-22ca-4e59-8e5f-fc381e92a67c    lambda-instance-id  The id of the lambda instance on which the application will be started  Yes  None  9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/ApplicationStart/#example", 
            "text": "In this example we are going to start the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl     curl -X POST -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY   \\\n   -F  lambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c   \\\n   'https:// hostname /api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/start/'   Response body  If the authentication token is correct, the response will be  {\n   status : {\n     short-description :  Your request to start the specified application has been accepted ,\n     code : 202\n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)  HTTP/1.1 409 CONFLICT : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/ApplicationStop/", 
            "text": "API - application stop - Description\n\n\nApplication stop call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist, and if the application is deployed on the instance. If any of these conditions is not met, the API will reply with a \"404 Not Found\" code. If the application has already been stopped on the specified lambda instance, or the respective job type slot on the lambda instance is free, the API will reply with a \"409 Conflict\" code. If the application is deployed on the lambda instance, has not been stopped, and its job slot is occupied, the API\nwill reply with a \"202 Accepted\" code and will stop the application on the lambda instance.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nStop an application  on a specified lambda instance\n\n\n\n\n\n\nURL\n\n\n/api/apps/[application-id]/stop/\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\napplication-id\n\n\nThe id of the application to be stopped\n\n\nYes\n\n\nNone\n\n\n7186be3f-22ca-4e59-8e5f-fc381e92a67c\n\n\n\n\n\n\nlambda-instance-id\n\n\nThe id of the lambda instance on which the application will be stopped\n\n\nYes\n\n\nNone\n\n\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\n\n\n\n\n\n\nExample\n\n\nIn this example we are going to stop the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n\n\nThe request in curl\n\n\ncurl -X POST -H \nAuthorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n -F \nlambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c\n \\\n 'https://\nhostname\n/api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/stop/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct, the response will be\n\n\n{\n  \nstatus\n: {\n    \nshort-description\n: \nYour request to stop the specified application has been accepted\n,\n    \ncode\n: 202\n  }\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 202 ACCEPTED : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)\n\n\nHTTP/1.1 404 NOT FOUND : (Fail)\n\n\nHTTP/1.1 409 CONFLICT : (Fail)", 
            "title": "Stop an Application"
        }, 
        {
            "location": "/service-api/ApplicationStop/#api-application-stop-description", 
            "text": "Application stop call, given an authentication token through the header Authorization,\nwill firstly check the validity of the token. If the token is invalid, the API will reply\nwith a \"401 Unauthorized\" code. If the token is valid, the API will check if the lambda instance and the application exist, and if the application is deployed on the instance. If any of these conditions is not met, the API will reply with a \"404 Not Found\" code. If the application has already been stopped on the specified lambda instance, or the respective job type slot on the lambda instance is free, the API will reply with a \"409 Conflict\" code. If the application is deployed on the lambda instance, has not been stopped, and its job slot is occupied, the API\nwill reply with a \"202 Accepted\" code and will stop the application on the lambda instance.", 
            "title": "API - application stop - Description"
        }, 
        {
            "location": "/service-api/ApplicationStop/#basic-parameters", 
            "text": "Type  Description      Description  Stop an application  on a specified lambda instance    URL  /api/apps/[application-id]/stop/    HTTP Method  POST    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Parameters     Name  Description  Required  Default value  Example value      application-id  The id of the application to be stopped  Yes  None  7186be3f-22ca-4e59-8e5f-fc381e92a67c    lambda-instance-id  The id of the lambda instance on which the application will be stopped  Yes  None  9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/ApplicationStop/#example", 
            "text": "In this example we are going to stop the application with id 7186be3f-22ca-4e59-8e5f-fc381e92a67c on the lambda instance with id\n9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  The request in curl  curl -X POST -H  Authorization: Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n -F  lambda_instance_id=9ac8e7ab-57f9-48a6-af18-ef8a749b1e8c  \\\n 'https:// hostname /api/apps/7186be3f-22ca-4e59-8e5f-fc381e92a67c/stop/'  Response body  If the authentication token is correct, the response will be  {\n   status : {\n     short-description :  Your request to stop the specified application has been accepted ,\n     code : 202\n  }\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 202 ACCEPTED : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)  HTTP/1.1 404 NOT FOUND : (Fail)  HTTP/1.1 409 CONFLICT : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/UserPublicKeys/", 
            "text": "API - User Public Keys - Description\n\n\nThe User public keys call, given an authentication token through the header Authorization, will\nconnect to the ~okeanos service and retrieve the user's saved public keys. If\nthe token is valid then the API will reply with a \"200 Success\" code, along with all the user's\npublic keys and the names that has been assigned to them. if the token is invalid it will return\nan \"401 Unauthorized\" error along with details regarding the error.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nGet user public keys\n\n\n\n\n\n\nURL\n\n\n/api/user-public-keys/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample\n\n\nIn the following example we are going to the get the keys uploaded on ~okeanos for\na specified user.\n\n\ncurl -X GET -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n'https://\nhostname\n/api/user-public-keys/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct then the response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nPublic keys uploaded to ~okeanos\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \ncontent\n: \nssh-rsa gfadsgdssAfadsds...\n,\n      \nfingerprint\n: \nFC:ds:...\n,\n      \nid\n: 1000,\n      \nname\n: \nkey-1\n,\n      \nuri\n: \n/userdata/keys/1000\n\n    },\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Get SSH public keys on ~okeanos"
        }, 
        {
            "location": "/service-api/UserPublicKeys/#api-user-public-keys-description", 
            "text": "The User public keys call, given an authentication token through the header Authorization, will\nconnect to the ~okeanos service and retrieve the user's saved public keys. If\nthe token is valid then the API will reply with a \"200 Success\" code, along with all the user's\npublic keys and the names that has been assigned to them. if the token is invalid it will return\nan \"401 Unauthorized\" error along with details regarding the error.", 
            "title": "API - User Public Keys - Description"
        }, 
        {
            "location": "/service-api/UserPublicKeys/#basic-parameters", 
            "text": "Type  Description      Description  Get user public keys    URL  /api/user-public-keys/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/UserPublicKeys/#example", 
            "text": "In the following example we are going to the get the keys uploaded on ~okeanos for\na specified user.  curl -X GET -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n'https:// hostname /api/user-public-keys/'  Response body  If the authentication token is correct then the response is  {\n   status : {\n     short_description :  Public keys uploaded to ~okeanos ,\n     code : 200\n  },\n   data : [\n    {\n       content :  ssh-rsa gfadsgdssAfadsds... ,\n       fingerprint :  FC:ds:... ,\n       id : 1000,\n       name :  key-1 ,\n       uri :  /userdata/keys/1000 \n    },\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/VMParameterValues/", 
            "text": "API - VM parameter values - Description\n\n\nVM parameter values call, given an authentication token through the header Authorization, will connect to ~okeanos service and retrieve the allowed values\nof the parameters for creating a VM on ~okeanos. If the token is valid, the API will reply with a \"200 Success\" code along with all the available values. If the token is\ninvalid, the API will reply with a \"401 Unauthorized\" error along with details regarding the error.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nGet VM parameter values.\n\n\n\n\n\n\nURL\n\n\n/api/vm-parameter-values/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample\n\n\nIn the following example we will fetch all the allowed values of the parameters\nfor creating a VM on ~okeanos.\n\n\ncurl -X GET -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n \\\n'https://\nhostname\n/api/vm-parameter-values/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct then the response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nAllowed values of parameters for creating a Lambda Instance\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \ndisk\n: [\n        5,\n        10,\n        20,\n        40,\n        60\n      ],\n      \nvcpus\n: [\n        1,\n        2,\n        4,\n        8\n      ],\n      \nram\n: [\n        512,\n        1024,\n        2048,\n        4096,\n        6144,\n        8192\n      ]\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Get allowed VM Parameter Values"
        }, 
        {
            "location": "/service-api/VMParameterValues/#api-vm-parameter-values-description", 
            "text": "VM parameter values call, given an authentication token through the header Authorization, will connect to ~okeanos service and retrieve the allowed values\nof the parameters for creating a VM on ~okeanos. If the token is valid, the API will reply with a \"200 Success\" code along with all the available values. If the token is\ninvalid, the API will reply with a \"401 Unauthorized\" error along with details regarding the error.", 
            "title": "API - VM parameter values - Description"
        }, 
        {
            "location": "/service-api/VMParameterValues/#basic-parameters", 
            "text": "Type  Description      Description  Get VM parameter values.    URL  /api/vm-parameter-values/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/VMParameterValues/#example", 
            "text": "In the following example we will fetch all the allowed values of the parameters\nfor creating a VM on ~okeanos.  curl -X GET -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  \\\n'https:// hostname /api/vm-parameter-values/'  Response body  If the authentication token is correct then the response is  {\n   status : {\n     short_description :  Allowed values of parameters for creating a Lambda Instance ,\n     code : 200\n  },\n   data : [\n    {\n       disk : [\n        5,\n        10,\n        20,\n        40,\n        60\n      ],\n       vcpus : [\n        1,\n        2,\n        4,\n        8\n      ],\n       ram : [\n        512,\n        1024,\n        2048,\n        4096,\n        6144,\n        8192\n      ]\n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/service-api/UserOkeanosProjects/", 
            "text": "API - User ~okeanos projects - Description\n\n\nUser ~okeanos projects call, given an authentication token through the header Authorization,\nwill connect to ~okeanos service and retrieve the projects to which the user is a member along\nwith the remaining quotas in each one of them.\nIf the token is valid, the API will reply with a \"200 Success\" code, along with all the\nproject names, ids and quotas. If the token is invalid, the API will reply with a \"401 Unauthorized\"\nerror along with details regarding the error.\n\n\nBasic Parameters\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nGet a list with user ~okeanos projects\n\n\n\n\n\n\nURL\n\n\n/api/user-okeanos-projects/\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample\n\n\nIn the following example we will request the ~okeanos projects of a specified user.\n\n\ncurl -X GET -H \nAuthorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY\n 'https://\nhostname\n/api/user-okeanos-projects/'\n\n\n\n\nResponse body\n\n\nIf the authentication token is correct then the response is\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \n~okeanos projects\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nid\n: \ne9ccbc1b-81f9-4c46-9258-a579f9f0d030\n,\n      \nname\n: \nlambda.grnet.gr\n,\n      \npithos_space\n: 150341341,\n      \nfloating_ip\n: 10,\n      \nram\n: 43215423621,\n      \nvm\n: 1,\n      \nprivate_network\n: 8,\n      \ndisk\n: 435463263245,\n      \ncpu\n: 38\n    },\n    {\n      \nid\n: \n089c8bea-cc17-4d30-b35c-460b443d19c6\n,\n      \nname\n: \nsystem:089c8bea-cc17-4d30-b35c-460b443d19c6\n,\n      \npithos_space\n: 45325324,\n      \nfloating_ip\n: 3,\n      \nram\n: 4321432143152,\n      \nvm\n: 4,\n      \nprivate_network\n: 3,\n      \ndisk\n: 30,\n      \ncpu\n: 1\n    }\n  ]\n}\n\n\n\n\nFor the case where the authentication token is not correct, refer to \nAuthentication page\n.\n\n\nResponse messages\n\n\nThe main response messages are:\n\n\n\n\nHTTP/1.1 200 OK : (Success)\n\n\nHTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Get User ~okeanos Projects"
        }, 
        {
            "location": "/service-api/UserOkeanosProjects/#api-user-okeanos-projects-description", 
            "text": "User ~okeanos projects call, given an authentication token through the header Authorization,\nwill connect to ~okeanos service and retrieve the projects to which the user is a member along\nwith the remaining quotas in each one of them.\nIf the token is valid, the API will reply with a \"200 Success\" code, along with all the\nproject names, ids and quotas. If the token is invalid, the API will reply with a \"401 Unauthorized\"\nerror along with details regarding the error.", 
            "title": "API - User ~okeanos projects - Description"
        }, 
        {
            "location": "/service-api/UserOkeanosProjects/#basic-parameters", 
            "text": "Type  Description      Description  Get a list with user ~okeanos projects    URL  /api/user-okeanos-projects/    HTTP Method  GET    Security  Basic Authentication     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..", 
            "title": "Basic Parameters"
        }, 
        {
            "location": "/service-api/UserOkeanosProjects/#example", 
            "text": "In the following example we will request the ~okeanos projects of a specified user.  curl -X GET -H  Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttY  'https:// hostname /api/user-okeanos-projects/'  Response body  If the authentication token is correct then the response is  {\n   status : {\n     short_description :  ~okeanos projects ,\n     code : 200\n  },\n   data : [\n    {\n       id :  e9ccbc1b-81f9-4c46-9258-a579f9f0d030 ,\n       name :  lambda.grnet.gr ,\n       pithos_space : 150341341,\n       floating_ip : 10,\n       ram : 43215423621,\n       vm : 1,\n       private_network : 8,\n       disk : 435463263245,\n       cpu : 38\n    },\n    {\n       id :  089c8bea-cc17-4d30-b35c-460b443d19c6 ,\n       name :  system:089c8bea-cc17-4d30-b35c-460b443d19c6 ,\n       pithos_space : 45325324,\n       floating_ip : 3,\n       ram : 4321432143152,\n       vm : 4,\n       private_network : 3,\n       disk : 30,\n       cpu : 1\n    }\n  ]\n}  For the case where the authentication token is not correct, refer to  Authentication page .  Response messages  The main response messages are:   HTTP/1.1 200 OK : (Success)  HTTP/1.1 401 UNAUTHORIZED : (Fail)", 
            "title": "Example"
        }, 
        {
            "location": "/central-api/details/", 
            "text": "Central service\n\n\nThe central service is available at \nlambda.grnet.gr\n. It collects usage metrics from user owned \u03bb services (i.e. number of deployed \u03bb instances/applications) and contains documentation on deploying and using a \u03bb service. \n\n\nCentral \u03bb API\n\n\nThe API listening of the central instance is responsible for collecting the usage metrics. This is not a user facing service. The central \u03bb API UML Class diagram is shown in the following picture.", 
            "title": "Details"
        }, 
        {
            "location": "/central-api/details/#central-service", 
            "text": "The central service is available at  lambda.grnet.gr . It collects usage metrics from user owned \u03bb services (i.e. number of deployed \u03bb instances/applications) and contains documentation on deploying and using a \u03bb service.", 
            "title": "Central service"
        }, 
        {
            "location": "/central-api/details/#central-api", 
            "text": "The API listening of the central instance is responsible for collecting the usage metrics. This is not a user facing service. The central \u03bb API UML Class diagram is shown in the following picture.", 
            "title": "Central \u03bb API"
        }, 
        {
            "location": "/central-api/", 
            "text": "API Overview\n\n\nOperations (performed by the API)\n\n\nUser related\n\n\n\n\n\n\nCreate user \nno api call, created from the HTTP headers\n\n\n\n\nThe user creation will be done automatically from the api when a new authentication is made by a User not previously existent inside the database.\n\n\n\n\n\n\n\n\nCount \nGET /api/users/count\n, (\nauthorization not needed\n)\n\n\n\n\nThe user will be able to make an API call and get the number of total users having lambda instances on the ~okeanos infrastructure.\n\n\n\n\n\n\n\n\nLambda instances related\n\n\n\n\n\n\nCreate lambda instance \nPOST /api/lambda_instances/\n\n\n\n\nThe service vm will issue an API call towards the central service, creating a new lambda instance.\n\n\nThe service vm will have to know the user's ~okeanos token.\n\n\n\n\n\n\n\n\nDestroy lambda instance \nDELETE /api/lambda-instances/[uuid]\n\n\n\n\nThe service vm will issue an API call towards the central service, deleting the lambda instance. The instance is the flagged\n  as deleted in its status.\n\nThe whole lambda cluster can be deleted from inside the kamaki API or the Web interface\n  \n\n\n\n\n\n\n\n\nUpdate lambda instance \nPOST /api/lambda_instances/[uuid]/status\n\n\n\n\nThe service vm will issue and API call towards the central service, updating the status field and, perhaps, the failure message of the lambda instance.\n\n\n\n\n\n\n\n\nList \nGET /api/lambda_instances\n\n\n\n\nThe user will be able to make an API call and get a list of all of their lambda instances running on the ~okeanos infrastructure.\n\n\n\n\n\n\n\n\nCount \nGET /api/lambda_instances/count\n (\nauthorization not needed\n)\n\n\n\n\nThe user will be able to make an API call and get the number of total lambda instances running on the ~okeanos infrastructure.\n\n\n\n\n\n\n\n\nLambda applications related\n\n\n\n\n\n\nCreate lambda application \nPOST /api/lambda_applications/\n\n\n\n\nThe service vm will issue an API call towards the central service, creating a new lambda application. It will have to pass both the user authentication token and the uuid of the lambda application.\n\n\nWill not be tracking application started from outside the service vm api\n\n\n\n\n\n\n\n\nDestroy lambda application \nDELETE /api/lambda_applications/[uuid]\n\n\n\n\nThe service vm will issue an API call towards the central service, deleting the lambda application.\n\n\nWill not be tracking application deleted from outside the service vm api\n \n\n\n\n\n\n\n\n\nUpdate lambda application \nPOST /api/lambda_applications/[uuid]/status\n\n\n\n\nThe service vm will issue and API call towards the central service, updating the status field and, perhaps, the failure message of the lambda application.\n\n\n\n\n\n\n\n\nList \nGET /api/lambda_applications\n\n\n\n\nThe user will be able to make an API call and retrieve a list of all of their lambda applications running on the ~okeanos infrastructure.\n\n\n\n\n\n\n\n\nCount \nGET /api/lambda_applications/count\n (\nauthorization not needed\n)\n\n\n\n\nThe user will be able to make an API call and get the number of total lambda applications running on the ~okeanos infrastructure.", 
            "title": "Description"
        }, 
        {
            "location": "/central-api/#api-overview", 
            "text": "", 
            "title": "API Overview"
        }, 
        {
            "location": "/central-api/#operations-performed-by-the-api", 
            "text": "User related    Create user  no api call, created from the HTTP headers   The user creation will be done automatically from the api when a new authentication is made by a User not previously existent inside the database.     Count  GET /api/users/count , ( authorization not needed )   The user will be able to make an API call and get the number of total users having lambda instances on the ~okeanos infrastructure.     Lambda instances related    Create lambda instance  POST /api/lambda_instances/   The service vm will issue an API call towards the central service, creating a new lambda instance.  The service vm will have to know the user's ~okeanos token.     Destroy lambda instance  DELETE /api/lambda-instances/[uuid]   The service vm will issue an API call towards the central service, deleting the lambda instance. The instance is the flagged\n  as deleted in its status. The whole lambda cluster can be deleted from inside the kamaki API or the Web interface        Update lambda instance  POST /api/lambda_instances/[uuid]/status   The service vm will issue and API call towards the central service, updating the status field and, perhaps, the failure message of the lambda instance.     List  GET /api/lambda_instances   The user will be able to make an API call and get a list of all of their lambda instances running on the ~okeanos infrastructure.     Count  GET /api/lambda_instances/count  ( authorization not needed )   The user will be able to make an API call and get the number of total lambda instances running on the ~okeanos infrastructure.     Lambda applications related    Create lambda application  POST /api/lambda_applications/   The service vm will issue an API call towards the central service, creating a new lambda application. It will have to pass both the user authentication token and the uuid of the lambda application.  Will not be tracking application started from outside the service vm api     Destroy lambda application  DELETE /api/lambda_applications/[uuid]   The service vm will issue an API call towards the central service, deleting the lambda application.  Will not be tracking application deleted from outside the service vm api       Update lambda application  POST /api/lambda_applications/[uuid]/status   The service vm will issue and API call towards the central service, updating the status field and, perhaps, the failure message of the lambda application.     List  GET /api/lambda_applications   The user will be able to make an API call and retrieve a list of all of their lambda applications running on the ~okeanos infrastructure.     Count  GET /api/lambda_applications/count  ( authorization not needed )   The user will be able to make an API call and get the number of total lambda applications running on the ~okeanos infrastructure.", 
            "title": "Operations (performed by the API)"
        }, 
        {
            "location": "/central-api/API_users/", 
            "text": "User-related API calls\n\n\nGet user count\n\n\nAPI Call\n\n\n\n\n\n\n\n\nAPI call\n\n\nEndpoint\n\n\n\n\n\n\n\n\n\n\nCount users\n\n\nGET /api/users/count\n\n\n\n\n\n\n\n\nExample API call\n\n\ncurl -X GET 'http://\nhostname\n/api/users/count'\n\n\nResponse\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLambda Users count on ~okeanos infrastructure.\n,\n    \ncode\n: 200\n  },\n  \ndata\n: {\n    \ncount\n: \ncount of active users\n\n  }\n}", 
            "title": "User API calls"
        }, 
        {
            "location": "/central-api/API_users/#user-related-api-calls", 
            "text": "", 
            "title": "User-related API calls"
        }, 
        {
            "location": "/central-api/API_users/#get-user-count", 
            "text": "API Call     API call  Endpoint      Count users  GET /api/users/count     Example API call  curl -X GET 'http:// hostname /api/users/count'  Response  {\n   status : {\n     short_description :  Lambda Users count on ~okeanos infrastructure. ,\n     code : 200\n  },\n   data : {\n     count :  count of active users \n  }\n}", 
            "title": "Get user count"
        }, 
        {
            "location": "/central-api/API_lambda_instances/", 
            "text": "Lambda Instances related API calls\n\n\nCreate Lambda Instance Record\n\n\nAPI Call\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\ncreate a new lambda instance record\n\n\n\n\n\n\n\n\nURL\n\n\n/api/lambda_instances/\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\nExample Value\n\n\n\n\n\n\n\n\n\n\nuuid\n\n\nThe Unique Identifier of the lamdba instance, as identified from the service vm\n\n\nYes\n\n\nNone\n\n\n'24b8a635-8d71-4016-b8f5-c4a14348ed8f'\n\n\n\n\n\n\nname\n\n\nThe name of the lamdba instance.\n\n\nYes\n\n\nNone\n\n\n'My first lambda instance'\n\n\n\n\n\n\ninstance_info\n\n\nJSON encoded info about specifications of the lambda instance.\n\n\nYes\n\n\nNone\n\n\n\"instance_info\": {...}\n\n\n\n\n\n\nstatus\n\n\nThe status of the lambda instance.\n\n\nYes\n\n\nNone\n\n\n\"20\"\n\n\n\n\n\n\nfailure_message\n\n\nA message related to the failed status of the lamdbda instance\n\n\nYes\n\n\n\"\"\n\n\n\"SSH connection timed out.\"\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample API call\n\n\ncurl -X POST -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" -d '{\"uuid\": \"24b8a635-8d71-4016-b8f5-c4a14348ed8f\", \"name\": \"My frist Lambda instance\", \"instance_info\": \"\", \"status\": \"20\", \"failure_message\": \"OK\"}' 'http://\nhostname\n/api/lambda_instances/'\n\n\nResponse\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nYour request to create a new lambda instance has been accepted.\n,\n    \ncode\n: 202\n  },\n  \ndata\n: [\n    {\n      \nid\n: \n24b8a635-8d71-4016-b8f5-c4a14348ed9f\n\n    }\n  ]\n}\n\n\n\n\n\nUpdate Lambda Instance Status\n\n\nAPI Call\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nupdate the status of the lambda instance\n\n\n\n\n\n\n\n\nURL\n\n\n/api/lambda_instances/[uuid]/status/\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\nExample Value\n\n\n\n\n\n\n\n\n\n\nstatus\n\n\nThe status of the lambda instance.\n\n\nYes\n\n\nNone\n\n\n\"20\"\n\n\n\n\n\n\nfailure_message\n\n\nA message related to the failed status of the lamdbda instance\n\n\nYes\n\n\n\"\"\n\n\n\"SSH connection timed out.\"\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample API call\n\n\ncurl -X POST -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" -d '{\"status\": \"20\", \"failure_message\": \"OK\"}' 'http://\nhostname\n/api/lambda_instances/24b8a635-8d71-4016-b8f5-c4a14348ed8f/status/'\n\n\nResponse\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLambda instances status update accepted.\n,\n    \ncode\n: 202\n  },\n  \ndata\n: [\n    {\n      \nid\n: \n24b8a635-8d71-4016-b8f5-c4a14348ed8f\n\n    }\n  ]\n}\n\n\n\n\n\nDelete Lambda Instance\n\n\nAPI Call\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\ndelete the specified lambda instance\n\n\n\n\n\n\n\n\nURL\n\n\n/api/lambda_instances/[uuid]\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nDELETE\n\n\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nyes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample API call\n\n\ncurl -X DELETE -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http://\nhostname\n/api/lambda_instances/24b8a635-8d71-4016-b8f5-c4a14348ed8f'\n\n\nResponse\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nYour request to destroy the specified lambda instance has been accepted.\n,\n    \ncode\n: 202\n  },\n  \ndata\n: [\n    {\n      \nid\n: \n24b8a635-8d71-4016-b8f5-c4a14348ed8f\n\n    }\n  ]\n}\n\n\n\n\n\nList Lambda Instances\n\n\nAPI Call\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nlists the lambda instances of the specified user\n\n\n\n\n\n\n\n\nURL\n\n\n/api/lambda_instances/\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nyes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample API call\n\n\ncurl -X GET -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http://\nhostname\n/api/lambda_instances/'\n\n\nResponse\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLambda instances.\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nuuid\n: \n24b8a635-8d71-4016-b8f5-c4a14348ed8f\n,\n      \nname\n: \nAPI_celery\n,\n      \ninstance_info\n: {\n          \nproject_name\n: \nlambda.grnet.gr\n,\n          \nmaster_name\n: \nlambda-master-1\n,\n          \nvcpus_master\n: 4,\n          \nnetwork_request\n: 1,\n          \ndisk_slave\n: 20,\n          \nslaves\n: 2,\n          \nram_slave\n: 4096,\n          \nram_master\n: 4096,\n          \nvcpus_slave\n: 4,\n          \nip_allocation\n: \nmaster\n,\n          \ndisk_master\n: 20\n        },\n      \nstatus\n: \n20\n,\n      \nfailure_message\n: \nOK\n\n    },\n    {\n      \nuuid\n: \n24b8a635-8d71-4016-b8f5-c4a14348ed8e\n,\n      \nname\n: \nAPI_celery\n,\n      \ninstance_info\n: {\n          \nproject_name\n: \nlambda.grnet.gr\n,\n          \nmaster_name\n: \nlambda-master-2\n,\n          \nvcpus_master\n: 4,\n          \nnetwork_request\n: 1,\n          \ndisk_slave\n: 20,\n          \nslaves\n: 2,\n          \nram_slave\n: 4096,\n          \nram_master\n: 4096,\n          \nvcpus_slave\n: 4,\n          \nip_allocation\n: \nmaster\n,\n          \ndisk_master\n: 20\n        },\n      \nstatus\n: \n20\n,\n      \nfailure_message\n: \nOK\n\n    },\n    {\n      \nuuid\n: \n24b8a635-8d71-4016-b8f5-c4a14348ed9f\n,\n      \nname\n: \nAPI_celery\n,\n      \ninstance_info\n: {\n          \nproject_name\n: \nlambda.grnet.gr\n,\n          \nmaster_name\n: \nlambda-master-3\n,\n          \nvcpus_master\n: 4,\n          \nnetwork_request\n: 1,\n          \ndisk_slave\n: 20,\n          \nslaves\n: 2,\n          \nram_slave\n: 4096,\n          \nram_master\n: 4096,\n          \nvcpus_slave\n: 4,\n          \nip_allocation\n: \nmaster\n,\n          \ndisk_master\n: 20\n        },\n      \nstatus\n: \n20\n,\n      \nfailure_message\n: \nOK\n\n    }\n  ]\n}\n\n\n\n\n\nPagination\n\n\nResults may be paginated, if one passes in the url the parameters \nlimit\n (\ncompulsory\n) and \noffset\n (\noptional\n).\n\n\ne.g.\n\n\ncurl -X GET -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http://\nhostname\n/api/instances?limit=1\noffset=2'\n\n\nCount Lambda Instances\n\n\nAPI Call\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\ncounts the active lambda instances and returns its count\n\n\n\n\n\n\n\n\nURL\n\n\n/api/lambda_instances/count\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\n\n\n\n\nExample API call\n\n\ncurl -X DELETE -H \"Content-Type: application/json\" 'http://\nhostname\n/api/lambda_instances/count\n\n\nResponse\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLamdba instances count.\n,\n    \ncode\n: 200\n  },\n  \ndata\n: {\n    \ncount\n: \n2\n\n  }\n}", 
            "title": "Lamdba Instances API calls"
        }, 
        {
            "location": "/central-api/API_lambda_instances/#lambda-instances-related-api-calls", 
            "text": "", 
            "title": "Lambda Instances related API calls"
        }, 
        {
            "location": "/central-api/API_lambda_instances/#create-lambda-instance-record", 
            "text": "API Call     Type  Description       Description  create a new lambda instance record     URL  /api/lambda_instances/     HTTP Method  POST     Security  Basic Authentication      Parameters     Parameter  Description  Required  Default Value  Example Value      uuid  The Unique Identifier of the lamdba instance, as identified from the service vm  Yes  None  '24b8a635-8d71-4016-b8f5-c4a14348ed8f'    name  The name of the lamdba instance.  Yes  None  'My first lambda instance'    instance_info  JSON encoded info about specifications of the lambda instance.  Yes  None  \"instance_info\": {...}    status  The status of the lambda instance.  Yes  None  \"20\"    failure_message  A message related to the failed status of the lamdbda instance  Yes  \"\"  \"SSH connection timed out.\"     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Example API call  curl -X POST -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" -d '{\"uuid\": \"24b8a635-8d71-4016-b8f5-c4a14348ed8f\", \"name\": \"My frist Lambda instance\", \"instance_info\": \"\", \"status\": \"20\", \"failure_message\": \"OK\"}' 'http:// hostname /api/lambda_instances/'  Response  {\n   status : {\n     short_description :  Your request to create a new lambda instance has been accepted. ,\n     code : 202\n  },\n   data : [\n    {\n       id :  24b8a635-8d71-4016-b8f5-c4a14348ed9f \n    }\n  ]\n}", 
            "title": "Create Lambda Instance Record"
        }, 
        {
            "location": "/central-api/API_lambda_instances/#update-lambda-instance-status", 
            "text": "API Call     Type  Description       Description  update the status of the lambda instance     URL  /api/lambda_instances/[uuid]/status/     HTTP Method  POST     Security  Basic Authentication      Parameters     Parameter  Description  Required  Default Value  Example Value      status  The status of the lambda instance.  Yes  None  \"20\"    failure_message  A message related to the failed status of the lamdbda instance  Yes  \"\"  \"SSH connection timed out.\"     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Example API call  curl -X POST -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" -d '{\"status\": \"20\", \"failure_message\": \"OK\"}' 'http:// hostname /api/lambda_instances/24b8a635-8d71-4016-b8f5-c4a14348ed8f/status/'  Response  {\n   status : {\n     short_description :  Lambda instances status update accepted. ,\n     code : 202\n  },\n   data : [\n    {\n       id :  24b8a635-8d71-4016-b8f5-c4a14348ed8f \n    }\n  ]\n}", 
            "title": "Update Lambda Instance Status"
        }, 
        {
            "location": "/central-api/API_lambda_instances/#delete-lambda-instance", 
            "text": "API Call     Type  Description       Description  delete the specified lambda instance     URL  /api/lambda_instances/[uuid]     HTTP Method  DELETE     Security  Basic Authentication      Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  yes  None  Token tJ3b3f32f23ceuqdoS_..     Example API call  curl -X DELETE -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http:// hostname /api/lambda_instances/24b8a635-8d71-4016-b8f5-c4a14348ed8f'  Response  {\n   status : {\n     short_description :  Your request to destroy the specified lambda instance has been accepted. ,\n     code : 202\n  },\n   data : [\n    {\n       id :  24b8a635-8d71-4016-b8f5-c4a14348ed8f \n    }\n  ]\n}", 
            "title": "Delete Lambda Instance"
        }, 
        {
            "location": "/central-api/API_lambda_instances/#list-lambda-instances", 
            "text": "API Call     Type  Description       Description  lists the lambda instances of the specified user     URL  /api/lambda_instances/     HTTP Method  GET     Security  Basic Authentication      Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  yes  None  Token tJ3b3f32f23ceuqdoS_..     Example API call  curl -X GET -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http:// hostname /api/lambda_instances/'  Response  {\n   status : {\n     short_description :  Lambda instances. ,\n     code : 200\n  },\n   data : [\n    {\n       uuid :  24b8a635-8d71-4016-b8f5-c4a14348ed8f ,\n       name :  API_celery ,\n       instance_info : {\n           project_name :  lambda.grnet.gr ,\n           master_name :  lambda-master-1 ,\n           vcpus_master : 4,\n           network_request : 1,\n           disk_slave : 20,\n           slaves : 2,\n           ram_slave : 4096,\n           ram_master : 4096,\n           vcpus_slave : 4,\n           ip_allocation :  master ,\n           disk_master : 20\n        },\n       status :  20 ,\n       failure_message :  OK \n    },\n    {\n       uuid :  24b8a635-8d71-4016-b8f5-c4a14348ed8e ,\n       name :  API_celery ,\n       instance_info : {\n           project_name :  lambda.grnet.gr ,\n           master_name :  lambda-master-2 ,\n           vcpus_master : 4,\n           network_request : 1,\n           disk_slave : 20,\n           slaves : 2,\n           ram_slave : 4096,\n           ram_master : 4096,\n           vcpus_slave : 4,\n           ip_allocation :  master ,\n           disk_master : 20\n        },\n       status :  20 ,\n       failure_message :  OK \n    },\n    {\n       uuid :  24b8a635-8d71-4016-b8f5-c4a14348ed9f ,\n       name :  API_celery ,\n       instance_info : {\n           project_name :  lambda.grnet.gr ,\n           master_name :  lambda-master-3 ,\n           vcpus_master : 4,\n           network_request : 1,\n           disk_slave : 20,\n           slaves : 2,\n           ram_slave : 4096,\n           ram_master : 4096,\n           vcpus_slave : 4,\n           ip_allocation :  master ,\n           disk_master : 20\n        },\n       status :  20 ,\n       failure_message :  OK \n    }\n  ]\n}  Pagination  Results may be paginated, if one passes in the url the parameters  limit  ( compulsory ) and  offset  ( optional ).  e.g.  curl -X GET -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http:// hostname /api/instances?limit=1 offset=2'", 
            "title": "List Lambda Instances"
        }, 
        {
            "location": "/central-api/API_lambda_instances/#count-lambda-instances", 
            "text": "API Call     Type  Description       Description  counts the active lambda instances and returns its count     URL  /api/lambda_instances/count     HTTP Method  GET      Example API call  curl -X DELETE -H \"Content-Type: application/json\" 'http:// hostname /api/lambda_instances/count  Response  {\n   status : {\n     short_description :  Lamdba instances count. ,\n     code : 200\n  },\n   data : {\n     count :  2 \n  }\n}", 
            "title": "Count Lambda Instances"
        }, 
        {
            "location": "/central-api/API_lambda_applications/", 
            "text": "Lambda Applications related API calls\n\n\nCreate Lambda Application Record\n\n\nAPI Call\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\ncreate a new lambda application record\n\n\n\n\n\n\n\n\nURL\n\n\n/api/lambda_applications/\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\nExample Value\n\n\n\n\n\n\n\n\n\n\nuuid\n\n\nThe Unique Identifier of the lamdba application, as identified from the service vm.\n\n\nYes\n\n\nNone\n\n\n'24b8a635-8d71-4016-b8f5-c4a14348ed8f'\n\n\n\n\n\n\nname\n\n\nThe name of the lamdba application.\n\n\nYes\n\n\nNone\n\n\n'My first lambda application'\n\n\n\n\n\n\ndescription\n\n\nDescription text about the lambda application.\n\n\nYes\n\n\nNone\n\n\n\"Testing the lambda cluster.\"\n\n\n\n\n\n\nstatus\n\n\nThe status of the lambda application.\n\n\nYes\n\n\nNone\n\n\n\"2\"\n\n\n\n\n\n\nfailure_message\n\n\n(optional) A message related to the failed status of the lamdbda application\n\n\nYes\n\n\n\"\"\n\n\n\"Segmentation fault.\"\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample API call\n\n\ncurl -X POST -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" -d '{\"uuid\": \"24b8a635-8d71-4016-b8f5-c4a14348ed8f\", \"name\": \"My frist Lambda application\", \"description\": \"\", \"status\": \"2\", \"failure_message\": \"Segmentation fault.\"}' 'http://\nhostname\n/api/lambda_applications/'\n\n\nResponse\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nYour request to create the specified application has been accepted.\n,\n    \ncode\n: 202\n  },\n  \ndata\n: [\n    {\n      \nid\n: \n24b8a635-8d71-4016-b8f5-c4a14348ed8f\n\n    }\n  ]\n}\n\n\n\n\n\nUpdate Lambda Application Status\n\n\nAPI Call\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nupdate the status of the lambda application\n\n\n\n\n\n\n\n\nURL\n\n\n/api/lambda_applications/[uuid]/status/\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nPOST\n\n\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\nExample Value\n\n\n\n\n\n\n\n\n\n\nstatus\n\n\nThe status of the lambda application.\n\n\nYes\n\n\nNone\n\n\n\"0\"\n\n\n\n\n\n\nfailure_message\n\n\nA message related to the failed status of the lamdbda application\n\n\nYes\n\n\n\"\"\n\n\n\"No stdout found.\"\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample API call\n\n\ncurl -X POST -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" -d '{\"status\": \"0\", \"failure_message\": \"\"}' 'http://\nhostname\n/api/lambda_applications/24b8a635-8d71-4016-b8f5-c4a14348ed8f/status/'\n\n\nResponse\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLambda application status update accepted.\n,\n    \ncode\n: 202\n  },\n  \ndata\n: [\n    {\n      \nid\n: \n24b8a635-8d71-4016-b8f5-c4a14348ed8f\n\n    }\n  ]\n}\n\n\n\n\n\nDelete Lambda Application\n\n\nAPI Call\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\ndelete the specified lambda application\n\n\n\n\n\n\n\n\nURL\n\n\n/api/lambda_applications/[uuid]\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nDELETE\n\n\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample API call\n\n\ncurl -X DELETE -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http://\nhostname\n/api/lambda_applications/24b8a635-8d71-4016-b8f5-c4a14348ed8f'\n\n\nResponse\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nYour request to destroy the specified lambda application has been accepted.\n,\n    \ncode\n: 202\n  },\n  \ndata\n: [\n    {\n      \nid\n: \n24b8a635-8d71-4016-b8f5-c4a14348ed8f\n\n    }\n  ]\n}\n\n\n\n\n\nList Lambda Applications\n\n\nAPI Call\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nlists the lambda applications of the specific user being authorized.\n\n\n\n\n\n\n\n\nURL\n\n\n/api/lambda_applications/\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\n\n\nSecurity\n\n\nBasic Authentication\n\n\n\n\n\n\n\n\n\n\nHeaders\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nRequired\n\n\nDefault value\n\n\nExample value\n\n\n\n\n\n\n\n\n\n\nAuthorization\n\n\n~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-\n API Access) https://accounts.okeanos.grnet.gr/ui/api_access.\n\n\nYes\n\n\nNone\n\n\nToken tJ3b3f32f23ceuqdoS_..\n\n\n\n\n\n\n\n\nExample API call\n\n\ncurl -X GET -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http://\nhostname\n/api/lambda_applications/'\n\n\nResponse\n\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLambda Applications.\n,\n    \ncode\n: 200\n  },\n  \ndata\n: [\n    {\n      \nuuid\n: \n24b8a635-8d71-4016-b8f5-c4a14348ed8f\n,\n      \ndescription\n: \nA lambda application created from the api\n,\n      \nname\n: \nCreatedFromAPi\n,\n      \nstatus\n: \n1\n,\n      \nfailure_message\n: \nSome failure message\n\n    },\n    {\n      \nuuid\n: \n24b8a635-8d71-4016-b8f5-c4a14348ed9f\n,\n      \ndescription\n: \nA lambda application created from the api\n,\n      \nname\n: \nCreatedFromAPi\n,\n      \nstatus\n: \n2\n,\n      \nfailure_message\n: \nSegmentation fault\n\n    }\n  ]\n}\n\n\n\n\n\nPagination\n\n\nResults may be paginated, if one passes in the url the parameters \nlimit\n (\ncompulsory\n) and \noffset\n (\noptional\n).\n\n\ne.g.\n\n\ncurl -X GET -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http://\nhostname\n/api/lambda_applications?limit=1\noffset=2'\n\n\nCount Lambda Applications\n\n\nAPI Call\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\ncounts the active lambda applications and returns its count\n\n\n\n\n\n\n\n\nURL\n\n\n/api/lambda_applications/count\n\n\n\n\n\n\n\n\nHTTP Method\n\n\nGET\n\n\n\n\n\n\n\n\n\n\nExample API call\n\n\ncurl -X DELETE -H \"Content-Type: application/json\" 'http://\nhostname\n/api/lambda_applications/count\n\n\nResponse\n\n\n{\n  \nstatus\n: {\n    \nshort_description\n: \nLamdba applications count.\n,\n    \ncode\n: 200\n  },\n  \ndata\n: {\n    \ncount\n: \n2\n\n  }\n}", 
            "title": "Lamdba Applications API calls"
        }, 
        {
            "location": "/central-api/API_lambda_applications/#lambda-applications-related-api-calls", 
            "text": "", 
            "title": "Lambda Applications related API calls"
        }, 
        {
            "location": "/central-api/API_lambda_applications/#create-lambda-application-record", 
            "text": "API Call     Type  Description       Description  create a new lambda application record     URL  /api/lambda_applications/     HTTP Method  POST     Security  Basic Authentication      Parameters     Parameter  Description  Required  Default Value  Example Value      uuid  The Unique Identifier of the lamdba application, as identified from the service vm.  Yes  None  '24b8a635-8d71-4016-b8f5-c4a14348ed8f'    name  The name of the lamdba application.  Yes  None  'My first lambda application'    description  Description text about the lambda application.  Yes  None  \"Testing the lambda cluster.\"    status  The status of the lambda application.  Yes  None  \"2\"    failure_message  (optional) A message related to the failed status of the lamdbda application  Yes  \"\"  \"Segmentation fault.\"     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Example API call  curl -X POST -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" -d '{\"uuid\": \"24b8a635-8d71-4016-b8f5-c4a14348ed8f\", \"name\": \"My frist Lambda application\", \"description\": \"\", \"status\": \"2\", \"failure_message\": \"Segmentation fault.\"}' 'http:// hostname /api/lambda_applications/'  Response  {\n   status : {\n     short_description :  Your request to create the specified application has been accepted. ,\n     code : 202\n  },\n   data : [\n    {\n       id :  24b8a635-8d71-4016-b8f5-c4a14348ed8f \n    }\n  ]\n}", 
            "title": "Create Lambda Application Record"
        }, 
        {
            "location": "/central-api/API_lambda_applications/#update-lambda-application-status", 
            "text": "API Call     Type  Description       Description  update the status of the lambda application     URL  /api/lambda_applications/[uuid]/status/     HTTP Method  POST     Security  Basic Authentication      Parameters     Parameter  Description  Required  Default Value  Example Value      status  The status of the lambda application.  Yes  None  \"0\"    failure_message  A message related to the failed status of the lamdbda application  Yes  \"\"  \"No stdout found.\"     Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Example API call  curl -X POST -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" -d '{\"status\": \"0\", \"failure_message\": \"\"}' 'http:// hostname /api/lambda_applications/24b8a635-8d71-4016-b8f5-c4a14348ed8f/status/'  Response  {\n   status : {\n     short_description :  Lambda application status update accepted. ,\n     code : 202\n  },\n   data : [\n    {\n       id :  24b8a635-8d71-4016-b8f5-c4a14348ed8f \n    }\n  ]\n}", 
            "title": "Update Lambda Application Status"
        }, 
        {
            "location": "/central-api/API_lambda_applications/#delete-lambda-application", 
            "text": "API Call     Type  Description       Description  delete the specified lambda application     URL  /api/lambda_applications/[uuid]     HTTP Method  DELETE     Security  Basic Authentication      Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Example API call  curl -X DELETE -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http:// hostname /api/lambda_applications/24b8a635-8d71-4016-b8f5-c4a14348ed8f'  Response  {\n   status : {\n     short_description :  Your request to destroy the specified lambda application has been accepted. ,\n     code : 202\n  },\n   data : [\n    {\n       id :  24b8a635-8d71-4016-b8f5-c4a14348ed8f \n    }\n  ]\n}", 
            "title": "Delete Lambda Application"
        }, 
        {
            "location": "/central-api/API_lambda_applications/#list-lambda-applications", 
            "text": "API Call     Type  Description       Description  lists the lambda applications of the specific user being authorized.     URL  /api/lambda_applications/     HTTP Method  GET     Security  Basic Authentication      Headers     Type  Description  Required  Default value  Example value      Authorization  ~okeanos authentication token. If you have an account you may find the authentication token at (Dashboad-  API Access) https://accounts.okeanos.grnet.gr/ui/api_access.  Yes  None  Token tJ3b3f32f23ceuqdoS_..     Example API call  curl -X GET -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http:// hostname /api/lambda_applications/'  Response  \n{\n   status : {\n     short_description :  Lambda Applications. ,\n     code : 200\n  },\n   data : [\n    {\n       uuid :  24b8a635-8d71-4016-b8f5-c4a14348ed8f ,\n       description :  A lambda application created from the api ,\n       name :  CreatedFromAPi ,\n       status :  1 ,\n       failure_message :  Some failure message \n    },\n    {\n       uuid :  24b8a635-8d71-4016-b8f5-c4a14348ed9f ,\n       description :  A lambda application created from the api ,\n       name :  CreatedFromAPi ,\n       status :  2 ,\n       failure_message :  Segmentation fault \n    }\n  ]\n}  Pagination  Results may be paginated, if one passes in the url the parameters  limit  ( compulsory ) and  offset  ( optional ).  e.g.  curl -X GET -H \"Content-Type: application/json\" -H \"Authorization:Token tJ3b3f32f23ceuqdoS_TH7m0d6yxmlWL1r2ralKcttR\" 'http:// hostname /api/lambda_applications?limit=1 offset=2'", 
            "title": "List Lambda Applications"
        }, 
        {
            "location": "/central-api/API_lambda_applications/#count-lambda-applications", 
            "text": "API Call     Type  Description       Description  counts the active lambda applications and returns its count     URL  /api/lambda_applications/count     HTTP Method  GET      Example API call  curl -X DELETE -H \"Content-Type: application/json\" 'http:// hostname /api/lambda_applications/count  Response  {\n   status : {\n     short_description :  Lamdba applications count. ,\n     code : 200\n  },\n   data : {\n     count :  2 \n  }\n}", 
            "title": "Count Lambda Applications"
        }, 
        {
            "location": "/about/license/", 
            "text": "License\n\n\n\n                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. \nhttp://fsf.org/\n\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \nThis License\n refers to version 3 of the GNU Affero General Public License.\n\n  \nCopyright\n also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \nThe Program\n refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \nyou\n.  \nLicensees\n and\n\nrecipients\n may be individuals or organizations.\n\n  To \nmodify\n a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \nmodified version\n of the\nearlier work or a work \nbased on\n the earlier work.\n\n  A \ncovered work\n means either the unmodified Program or a work based\non the Program.\n\n  To \npropagate\n a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \nconvey\n a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \nAppropriate Legal Notices\n\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \nsource code\n for a work means the preferred form of the work\nfor making modifications to it.  \nObject code\n means any non-source\nform of a work.\n\n  A \nStandard Interface\n means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \nSystem Libraries\n of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\nMajor Component\n, in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \nCorresponding Source\n for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \nkeep intact all notices\n.\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\naggregate\n if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \nUser Product\n is either (1) a \nconsumer product\n, which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \nnormally used\n refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \nInstallation Information\n for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \nAdditional permissions\n are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \nfurther\nrestrictions\n within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \nentity transaction\n is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \ncontributor\n is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \ncontributor version\n.\n\n  A contributor's \nessential patent claims\n are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \ncontrol\n includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \npatent license\n is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \ngrant\n such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \nKnowingly relying\n means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \ndiscriminatory\n if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \nor any later version\n applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \nAS IS\n WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \ncopyright\n line and a pointer to where the full notice is found.\n\n    \none line to give the program's name and a brief idea of what it does.\n\n    Copyright (C) \nyear\n  \nname of author\n\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see \nhttp://www.gnu.org/licenses/\n.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \nSource\n link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \ncopyright disclaimer\n for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n\nhttp://www.gnu.org/licenses/\n.", 
            "title": "License"
        }, 
        {
            "location": "/about/license/#license", 
            "text": "GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc.  http://fsf.org/ \n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n   This License  refers to version 3 of the GNU Affero General Public License.\n\n   Copyright  also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n   The Program  refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as  you .   Licensees  and recipients  may be individuals or organizations.\n\n  To  modify  a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a  modified version  of the\nearlier work or a work  based on  the earlier work.\n\n  A  covered work  means either the unmodified Program or a work based\non the Program.\n\n  To  propagate  a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To  convey  a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays  Appropriate Legal Notices \nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The  source code  for a work means the preferred form of the work\nfor making modifications to it.   Object code  means any non-source\nform of a work.\n\n  A  Standard Interface  means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The  System Libraries  of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A Major Component , in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The  Corresponding Source  for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n     keep intact all notices .\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an aggregate  if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A  User Product  is either (1) a  consumer product , which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user,  normally used  refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n   Installation Information  for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n   Additional permissions  are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered  further\nrestrictions  within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An  entity transaction  is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A  contributor  is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's  contributor version .\n\n  A contributor's  essential patent claims  are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition,  control  includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a  patent license  is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To  grant  such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.   Knowingly relying  means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is  discriminatory  if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License  or any later version  applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM  AS IS  WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe  copyright  line and a pointer to where the full notice is found.\n\n     one line to give the program's name and a brief idea of what it does. \n    Copyright (C)  year    name of author \n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see  http://www.gnu.org/licenses/ .\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a  Source  link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a  copyright disclaimer  for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see http://www.gnu.org/licenses/ .", 
            "title": "License"
        }
    ]
}